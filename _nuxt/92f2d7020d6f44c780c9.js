(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{347:function(e,o){const r={render:function(){this.$createElement;return this._self._c,this._m(0)},staticRenderFns:[function(){var e=this,o=e.$createElement,r=e._self._c||o;return r("div",{staticClass:"frontmatter-markdown"},[r("p",[r("code",{pre:!0},[e._v("psql")]),e._v("や何かのSQLツールで、SQLを実行した時、このエラーが出ると、その後クエリが実行できなくなることがあったので、調べてみた。")]),e._v(" "),r("p",[e._v("原因は簡単だが、大量クエリを実行したので、気づかず、結構ハマった！")]),e._v(" "),r("h2",[e._v("原因")]),e._v(" "),r("p",[r("code",{pre:!0},[e._v("Transaction")]),e._v("内に一度エラーが発生すると、明示的にその"),r("code",{pre:!0},[e._v("Transaction")]),e._v("を"),r("code",{pre:!0},[e._v("abort")]),e._v("しなければならないようだ。")]),e._v(" "),r("p",[r("code",{pre:!0},[e._v("SQL Server")]),e._v("等の他のRDBMSだと、エラーが出てきても、その場で直して、処理を続けるんだね。")]),e._v(" "),r("p",[e._v("[例]")]),e._v(" "),r("pre",{staticClass:"language-sql"},[r("code",{pre:!0,attrs:{class:"language-sql"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("begin")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nselet "),r("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" foo"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),r("p",[e._v("このクエリを実行すると、"),r("code",{pre:!0},[e._v("「ERROR: syntax error at or near ‘selet’“」")]),e._v("が出るはず。"),r("br"),e._v("\nこれで正しく"),r("code",{pre:!0},[e._v("select * from foo;")]),e._v("に修正し、再度実行をすると、冒頭のエラーが出て実行できなかった。"),r("br"),e._v("\n因みに、"),r("code",{pre:!0},[e._v("sqlserver")]),e._v("はこの問題が発生しないようだ。")]),e._v(" "),r("h2",[e._v("対策")]),e._v(" "),r("p",[e._v("エラーが出たら、")]),e._v(" "),r("pre",[r("code",{pre:!0},[e._v("rollback;\n")])]),e._v(" "),r("p",[e._v("を実行しなければならない。")]),e._v(" "),r("h2",[e._v("なぜ"),r("code",{pre:!0},[e._v("Postgres")]),e._v("はそうなったのか？")]),e._v(" "),r("p",[r("code",{pre:!0},[e._v("Postgres")]),e._v("はユーザで終了した"),r("code",{pre:!0},[e._v("Transaction")]),e._v("とシステムの都合(例外等）で終了した"),r("code",{pre:!0},[e._v("Transaction")]),e._v("は区別しているようだ。\n"),r("a",{attrs:{href:"https://github.com/postgres/postgres/blob/master/src/backend/access/transam/README"}},[e._v("https://github.com/postgres/postgres/blob/master/src/backend/access/transam/README")]),e._v("を参照すると、")]),e._v(" "),r("blockquote",[r("ul",[r("li",[r("ol",[r("li",[e._v("システムの都合で"),r("code",{pre:!0},[e._v("Transaction")]),e._v("が終了した場合：AbortCurrentTransaction アプリケーション状態はTBLOCK_ABORT")])])]),e._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[e._v("ユーザで"),r("code",{pre:!0},[e._v("Transaction")]),e._v("を終了した場合：UserAbortTransactionBlock アプリケーション状態はTBLOCK_ABORT_END")])])])])]),e._v(" "),r("p",[e._v("ケース１でも自動に"),r("code",{pre:!0},[e._v("Transaction")]),e._v("を終了させれば良いでしょうかって思うよね。\n実はそれに応じる"),r("code",{pre:!0},[e._v("onerrorrollback")]),e._v("オプションがあるが、やっぱり長い"),r("code",{pre:!0},[e._v("Transaction")]),e._v("内にエラーが発生したら、最初から実施しないといけない点は不便が感じるよね〜\n"),r("code",{pre:!0},[e._v("onerrorrollback")]),e._v("についての詳細説明も是非ご参照ください。\n"),r("a",{attrs:{href:"https://www.endpoint.com/blog/2015/02/24/postgres-onerrorrollback-explained"}},[e._v("https://www.endpoint.com/blog/2015/02/24/postgres-onerrorrollback-explained")])])])}]};e.exports={attributes:{title:"[Postgres] current transaction is aborted, commands ignored until end of transaction block",date:"2018-01-11T22:15:40.000Z",description:"postgresの特殊な扱いに不注意でハマった為、メモした",thumbnail:"posts/postgres-elephant.png",featured_image:"postgres-current-transaction-is-aborted/featured.png",tags:["postgres"]},html:'<p><code>psql</code>や何かのSQLツールで、SQLを実行した時、このエラーが出ると、その後クエリが実行できなくなることがあったので、調べてみた。</p>\n<p>原因は簡単だが、大量クエリを実行したので、気づかず、結構ハマった！</p>\n<h2>原因</h2>\n<p><code>Transaction</code>内に一度エラーが発生すると、明示的にその<code>Transaction</code>を<code>abort</code>しなければならないようだ。</p>\n<p><code>SQL Server</code>等の他のRDBMSだと、エラーが出てきても、その場で直して、処理を続けるんだね。</p>\n<p>[例]</p>\n<pre class="language-sql"><code class="language-sql"><span class="token keyword">begin</span><span class="token punctuation">;</span>\nselet <span class="token operator">*</span> <span class="token keyword">from</span> foo<span class="token punctuation">;</span>\n</code></pre>\n<p>このクエリを実行すると、<code>「ERROR: syntax error at or near ‘selet’“」</code>が出るはず。<br>\nこれで正しく<code>select * from foo;</code>に修正し、再度実行をすると、冒頭のエラーが出て実行できなかった。<br>\n因みに、<code>sqlserver</code>はこの問題が発生しないようだ。</p>\n<h2>対策</h2>\n<p>エラーが出たら、</p>\n<pre><code>rollback;\n</code></pre>\n<p>を実行しなければならない。</p>\n<h2>なぜ<code>Postgres</code>はそうなったのか？</h2>\n<p><code>Postgres</code>はユーザで終了した<code>Transaction</code>とシステムの都合(例外等）で終了した<code>Transaction</code>は区別しているようだ。\n<a href="https://github.com/postgres/postgres/blob/master/src/backend/access/transam/README">https://github.com/postgres/postgres/blob/master/src/backend/access/transam/README</a>を参照すると、</p>\n<blockquote>\n<ul>\n<li>\n<ol>\n<li>システムの都合で<code>Transaction</code>が終了した場合：AbortCurrentTransaction アプリケーション状態はTBLOCK_ABORT</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>ユーザで<code>Transaction</code>を終了した場合：UserAbortTransactionBlock アプリケーション状態はTBLOCK_ABORT_END</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<p>ケース１でも自動に<code>Transaction</code>を終了させれば良いでしょうかって思うよね。\n実はそれに応じる<code>onerrorrollback</code>オプションがあるが、やっぱり長い<code>Transaction</code>内にエラーが発生したら、最初から実施しないといけない点は不便が感じるよね〜\n<code>onerrorrollback</code>についての詳細説明も是非ご参照ください。\n<a href="https://www.endpoint.com/blog/2015/02/24/postgres-onerrorrollback-explained">https://www.endpoint.com/blog/2015/02/24/postgres-onerrorrollback-explained</a></p>\n',meta:{resourcePath:"/Volumes/Data/github.com/thanhchungbtc/myblog/content/postgres-current-transaction-is-aborted/index.md"},vue:{component:{data:function(){return{templateRender:null}},render:function(e){return this.templateRender?this.templateRender():e("div","Rendering")},created:function(){this.templateRender=r.render,this.$options.staticRenderFns=r.staticRenderFns}}}}}}]);