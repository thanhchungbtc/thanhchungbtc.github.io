(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{349:function(n,t){const e={render:function(){this.$createElement;return this._self._c,this._m(0)},staticRenderFns:[function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"frontmatter-markdown"},[e("h2",[n._v("問題")]),n._v(" "),e("p",[e("code",{pre:!0},[n._v("psql")]),n._v("でSQLを指定して実行できるが、例えば複数SQLを同時に実行させ、また前のSQLの結果によって、続行するかしないかという条件付きの複雑SQLを実行することができない。")]),n._v(" "),e("p",[n._v("今回以下のようにShell scriptを作りたい。")]),n._v(" "),e("pre",{staticClass:"language-shell"},[e("code",{pre:!0,attrs:{class:"language-shell"}},[e("span",{pre:!0,attrs:{class:"token function-name function"}},[n._v("ConnectDb")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[n._v("PGPASSWORD")]),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v("postgres psql -U postgres database -t -A -F , -v "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[n._v("ON_ERROR_STOP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v(" -v "),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[n._v("AUTOCOMMIT")]),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function-name function"}},[n._v("printMsg")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\t"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("echo")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"'),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("$PROGRAM")]),n._v("/"),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("$SUBMODULE")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("$(")]),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("date")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('"+ %Y%H%s"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v(")")])]),n._v('"')]),n._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[n._v("$1")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("|")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("tee")]),n._v(" -a ~/Desktop/shell/log/test.log\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\nConnectDb "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<<")]),e("span",{pre:!0,attrs:{class:"token string"}},[n._v('EOF\n  start transaction;\n\n  select * from ...;\n  # other database stubs\n\n  # addtional operations like logging come here\n  printMsg "Querying ..."\n\n  # mix of conditional shell and psql command\n  if [ some accepted condition ] commit;\n  if [ some bad conditions ] rollback;\n  if [ should do more database query ] do some CRUD actions\n  \n  commit;\nEOF')]),n._v("\n")])]),n._v(" "),e("h2",[n._v("解決方法")]),n._v(" "),e("p",[e("code",{pre:!0},[n._v("shell")]),n._v("と"),e("code",{pre:!0},[n._v("SQL")]),n._v("が混在する為、単純の"),e("code",{pre:!0},[n._v("psql")]),n._v("に制御コマンドを入れることができない。")]),n._v(" "),e("blockquote",[e("p",[n._v("ちなみに、"),e("code",{pre:!0},[n._v("db2")]),n._v("はこのような"),e("code",{pre:!0},[n._v("shell")]),n._v("scriptを簡単に作れる。")])]),n._v(" "),e("p",[n._v("ここで、"),e("code",{pre:!0},[n._v("coproc")]),n._v("を使えば、実現可能なことがわかった。")]),n._v(" "),e("p",[e("code",{pre:!0},[n._v("coproc")]),n._v("の詳細は"),e("a",{attrs:{href:"https://unix.stackexchange.com/questions/86270/how-do-you-use-the-command-coproc-in-various-shells"}},[n._v("stackoverflow")]),n._v("ですごいわかりやすい回答があるので、ご参考ください。")]),n._v(" "),e("h3",[e("code",{pre:!0},[n._v("psql")]),n._v("をバックグラウンドで動かせる")]),n._v(" "),e("h3",[e("code",{pre:!0},[n._v("psql")]),n._v("にSQLを取り入れる")]),n._v(" "),e("h3",[e("code",{pre:!0},[n._v("SQL")]),n._v("の実行結果を確認する")])])}]};n.exports={attributes:{title:"[Shell]Shellで複雑なトランザクション制御方法",description:"shで条件付きのSQLを実行する時などに役に立つ",date:"2017-08-02T23:46:25.000Z",thumbnail:"posts/linux-shell.png",draft:!1,tags:["shell","postgres","coprocess","linux"]},html:'<h2>問題</h2>\n<p><code>psql</code>でSQLを指定して実行できるが、例えば複数SQLを同時に実行させ、また前のSQLの結果によって、続行するかしないかという条件付きの複雑SQLを実行することができない。</p>\n<p>今回以下のようにShell scriptを作りたい。</p>\n<pre class="language-shell"><code class="language-shell"><span class="token function-name function">ConnectDb</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t <span class="token assign-left variable">PGPASSWORD</span><span class="token operator">=</span>postgres psql -U postgres database -t -A -F , -v <span class="token assign-left variable">ON_ERROR_STOP</span><span class="token operator">=</span><span class="token number">1</span> -v <span class="token assign-left variable">AUTOCOMMIT</span><span class="token operator">=</span><span class="token number">0</span>\n<span class="token punctuation">}</span>\n\n<span class="token function-name function">printMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$PROGRAM</span>/<span class="token variable">$SUBMODULE</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+ %Y%H%s"</span><span class="token variable">)</span></span>"</span> <span class="token variable">$1</span> <span class="token operator">|</span> <span class="token function">tee</span> -a ~/Desktop/shell/log/test.log\n<span class="token punctuation">}</span>\n\nConnectDb <span class="token operator">&lt;&lt;</span><span class="token string">EOF\n  start transaction;\n\n  select * from ...;\n  # other database stubs\n\n  # addtional operations like logging come here\n  printMsg "Querying ..."\n\n  # mix of conditional shell and psql command\n  if [ some accepted condition ] commit;\n  if [ some bad conditions ] rollback;\n  if [ should do more database query ] do some CRUD actions\n  \n  commit;\nEOF</span>\n</code></pre>\n<h2>解決方法</h2>\n<p><code>shell</code>と<code>SQL</code>が混在する為、単純の<code>psql</code>に制御コマンドを入れることができない。</p>\n<blockquote>\n<p>ちなみに、<code>db2</code>はこのような<code>shell</code>scriptを簡単に作れる。</p>\n</blockquote>\n<p>ここで、<code>coproc</code>を使えば、実現可能なことがわかった。</p>\n<p><code>coproc</code>の詳細は<a href="https://unix.stackexchange.com/questions/86270/how-do-you-use-the-command-coproc-in-various-shells">stackoverflow</a>ですごいわかりやすい回答があるので、ご参考ください。</p>\n<h3><code>psql</code>をバックグラウンドで動かせる</h3>\n<h3><code>psql</code>にSQLを取り入れる</h3>\n<h3><code>SQL</code>の実行結果を確認する</h3>\n',meta:{resourcePath:"/Volumes/Data/github.com/thanhchungbtc/myblog/content/shell-postgres-transaction-control/index.md"},vue:{component:{data:function(){return{templateRender:null}},render:function(n){return this.templateRender?this.templateRender():n("div","Rendering")},created:function(){this.templateRender=e.render,this.$options.staticRenderFns=e.staticRenderFns}}}}}}]);