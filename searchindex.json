{"categories":[],"posts":[{"content":"今回はAPIを使って、実際のMoviesデータを表示しましょう。\n ゴール\n Movie API ネットワーキング、RestAPI   Asynchronous: Future, async, await 非同期オペレーションを実装する為に、DartはFuture,async,awaitを用意しています。\nasyncとawaitはほぼどの言語にでもあるから、言うまでもなく。でも、Futureって何？\nFutureとは JavascriptのPromiseと似ている感じでしょうか。\nFutureは将来のどこかのタイミングで終わる予定のオペレーションの結果です。\n Uncompleted Completed  正常Completed エラーCompleted    という２状態があります。\nDartホームページ https://dart.dev/codelabs/async-await に詳しく解説しますので、そちらをご参照ください\n次は実際画面に応用しましょう\nMovies APIと連携 APIKeyを取得 APIの提供者：https://www.themoviedb.org/documentation/api\n登録して、APIkeyを取得してください。\nModels models.dart\nclass Genre { final int id; final String name; Genre({ this.id, this.name, }); } class Movie { final int id; final int vote_count; final double vote_average; final double popularity; final String title; final String overview; final String release_date; final String poster_path; final String backdrop_path; final String original_language; final String original_title; final bool video; final bool adult; final List\u0026lt;Genre\u0026gt; genres; Movie({ this.id, this.title = '', this.vote_average = 0, this.overview = '', this.release_date = '', this.popularity = 0, this.vote_count = 0, this.video = false, this.poster_path = '', this.adult = false, this.backdrop_path = '', this.original_language = '', this.original_title = '', this.genres = const [], }); factory Movie.fromMap(Map dict) { return Movie( id: dict[\u0026quot;id\u0026quot;], vote_count: dict[\u0026quot;vote_count\u0026quot;], vote_average: double.parse(dict[\u0026quot;vote_average\u0026quot;].toString()), popularity: double.parse(dict[\u0026quot;popularity\u0026quot;].toString()), title: dict[\u0026quot;title\u0026quot;], overview: dict[\u0026quot;overview\u0026quot;], release_date: dict[\u0026quot;release_date\u0026quot;], video: dict[\u0026quot;video\u0026quot;], poster_path: dict[\u0026quot;poster_path\u0026quot;], adult: dict[\u0026quot;adult\u0026quot;], backdrop_path: dict[\u0026quot;backdrop_path\u0026quot;], original_language: dict[\u0026quot;original_language\u0026quot;], original_title: dict[\u0026quot;original_title\u0026quot;], ); } }  HTTPパッケージ追加 pubspec.yaml\ndependencies: http:  AvatarWidget class Avatar extends StatelessWidget { final double width; final double height; final String url; const Avatar({ Key key, this.width, this.height, this.url, }) : super(key: key); @override Widget build(BuildContext context) { return Container( width: width, height: height, decoration: BoxDecoration( color: Colors.white, boxShadow: [ BoxShadow(color: Colors.grey.shade400, blurRadius: 8, offset: Offset(1, 5), spreadRadius: 2), ] ), child: this.url == null ? Container() : Image.network( this.url, fit: BoxFit.cover, ), ); } }  TheMovieDbAPI Singletonで、ネットワーキングやり取りは全部このクラスで行います。 Dartの独特な実装方法で、Singletonを便利の使えます。 services/themoviedb_api.dart\nclass TheMovieDbAPI { final String baseURL = \u0026quot;https://api.themoviedb.org/3\u0026quot;; final String apiKey = \u0026quot;\u0026quot;; // ★★★APIKeyを入れてください。 static final TheMovieDbAPI _instance = TheMovieDbAPI._internal(); factory TheMovieDbAPI() =\u0026gt; _instance; TheMovieDbAPI._internal(); }  API使用する例\nfinal apiService = TheMovieDbAPI();  services/themoviedb_api.dart*\nimport 'dart:convert'; import 'package:flutter_movies/models/models.dart'; import 'package:http/http.dart' as http; class TheMovieDbAPI { final String baseURL = \u0026quot;https://api.themoviedb.org/3\u0026quot;; final String apiKey = \u0026quot;\u0026quot;; // ★★★APIKeyを入れてください。 static final TheMovieDbAPI _instance = TheMovieDbAPI._internal(); factory TheMovieDbAPI() =\u0026gt; _instance; TheMovieDbAPI._internal(); Future\u0026lt;List\u0026lt;Movie\u0026gt;\u0026gt; fetchMovies(String featured) async { final url = \u0026quot;${this.baseURL}/movie/$featured?api_key=${this.apiKey}\u0026quot;; final res = await http.get(url); final data = res.body; final dict = json.decode(data); final List arr = dict[\u0026quot;results\u0026quot;]; List\u0026lt;Movie\u0026gt; results = []; for (final dict in arr) { dict['poster_path'] = TheMovieDbImageUrl.resolveUrl(dict[\u0026quot;poster_path\u0026quot;], ImageSize.Small); results.add(Movie.fromMap(dict)); } return results; } } enum ImageSize { Small, Medium, Cast, Original } class TheMovieDbImageUrl { static final String small = \u0026quot;https://image.tmdb.org/t/p/w154/\u0026quot;; static final String medium = \u0026quot;https://image.tmdb.org/t/p/w500/\u0026quot;; static final String cast = \u0026quot;https://image.tmdb.org/t/p/w185/\u0026quot;; static final String original = \u0026quot;https://image.tmdb.org/t/p/original/\u0026quot;; static String resolveUrl(String path, ImageSize size) { switch (size) { case ImageSize.Small: return \u0026quot;$small$path\u0026quot;; break; case ImageSize.Medium: return \u0026quot;$medium$path\u0026quot;; break; case ImageSize.Cast: return \u0026quot;$cast$path\u0026quot;; break; case ImageSize.Original: return \u0026quot;$original$path\u0026quot;; break; } return path; } }  AvatarWidget class Avatar extends StatelessWidget { final double width; final double height; final String url; const Avatar({ Key key, this.width, this.height, this.url, }) : super(key: key); @override Widget build(BuildContext context) { return Container( width: width, height: height, decoration: BoxDecoration( color: Colors.white, boxShadow: [ BoxShadow(color: Colors.grey.shade400, blurRadius: 8, offset: Offset(1, 5), spreadRadius: 2), ] ), child: this.url == null ? Container() : Image.network( this.url, fit: BoxFit.cover, ), ); } }  HomeViewModel import 'dart:math'; import 'package:flutter/material.dart'; import 'package:flutter_movies/models/models.dart'; import 'package:flutter_movies/services/themoviedb_api.dart'; final random = Random(); class HomeViewModel extends ChangeNotifier { String appBarTitle = ''; List\u0026lt;String\u0026gt; menus = ['Popular', 'Top Rated', 'Upcoming', 'Now Playing']; List\u0026lt;Movie\u0026gt; movies = []; int selectedIndex = 0; List\u0026lt;bool\u0026gt; get isSelected { List\u0026lt;bool\u0026gt; results = this.menus.map\u0026lt;bool\u0026gt;((s) =\u0026gt; false).toList(); results[this.selectedIndex] = true; return results; } HomeViewModel() { this.appBarTitle = this.menus[this.selectedIndex]; } void changeSelectedMenu(int targetIndex) { this.selectedIndex = targetIndex; this.appBarTitle = this.menus[targetIndex]; this.notifyListeners(); this.fetchMovies(); } void fetchMovies() async { String featured = 'popular'; if (selectedIndex == 1) { featured = \u0026quot;top_rated\u0026quot;; } else if (selectedIndex == 2) { featured = \u0026quot;upcoming\u0026quot;; } else if (selectedIndex == 3) { featured = \u0026quot;now_playing\u0026quot;; } final apiService = TheMovieDbAPI(); this.movies = await apiService.fetchMovies(featured); this.notifyListeners(); } }  結果 まとめ  httpで実際のAPIと連携 Dartのasynchronous DartのSingletonパータン   詳細画面を作ってみてください。\n 次回は\n Cache,Performance向上 Dart Isolate Animation  ","id":0,"section":"posts","summary":"今回はAPIを使って、実際のMoviesデータを表示しましょう。 ゴール Movie API ネットワーキング、RestAPI Asynchronous: Future, async, await 非同期オペレーションを実装","tags":["iOS","flutter","crossplatform"],"title":"[Flutter]iOSアプリチュートリアルPart6 - Networking: Movie Rest API","uri":"https://thanhchungbtc.github.io/2019/12/movie-app-tutorial-part6/","year":"2019"},{"content":" ゴール\n Refactoring Providerの使い方 StatelessWidgetを最優先に使用する考え方   Refactoring 全てmain.dartに記述し、管理できない状態になったので、ファイル別に分けてRefactoringしよう。\n  各画面をファイルそれぞれに分ける\n  コンポーネント化\nカスタマイズWidgetで、画面部分的にWidgetを作る。\n  HomePage  _ToggleButtons：現在選択中インデックスを保ちたいので、StatefulWidget _MovieList: Movie一覧  class _HomePageState extends State\u0026lt;HomePage\u0026gt; { List\u0026lt;String\u0026gt; _menus = ['Popular', 'Top Rated', 'Upcoming', 'Now Playing']; List\u0026lt;Movie\u0026gt; _movies = []; String _title = ''; final _scrollController = ScrollController(); final random = Random(); @override void initState() { super.initState(); // 最初のアイテムを「選択中」に設定 this._title = this._menus[0]; this.fetchMovies(); } void fetchMovies() { this._movies = List.generate( random.nextInt(30) + 10, (index) =\u0026gt; Movie( title: \u0026quot;Title ${index + 1}\u0026quot;, release_date: \u0026quot;2019-01-01\u0026quot;, overview: \u0026quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temportempor\u0026quot;, ), ); if (this._scrollController.hasClients) { this._scrollController.animateTo(0, duration: Duration(milliseconds: 300), curve: Curves.easeInOut); } } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(this._title), actions: \u0026lt;Widget\u0026gt;[ IconButton( icon: Icon(Icons.search), onPressed: () { Navigator.push( context, NoAnimationRoute( builder: (context) =\u0026gt; SearchPage(), ), ); }, ) ], ), body: Column( children: \u0026lt;Widget\u0026gt;[ _ToggleButtons( menus: this._menus, onSelectedIndexChanged: (index) { setState(() { this.fetchMovies(); this._title = this._menus[index]; }); }, ), _MovieList( scrollController: _scrollController, movies: _movies, ), ], ), ); } }   _ToggleButtons  class _ToggleButtons extends StatefulWidget { final List\u0026lt;String\u0026gt; menus; final void Function(int) onSelectedIndexChanged; const _ToggleButtons({ Key key, @required this.menus, @required this.onSelectedIndexChanged, }) : super(key: key); @override __ToggleButtonsState createState() =\u0026gt; __ToggleButtonsState(); } class __ToggleButtonsState extends State\u0026lt;_ToggleButtons\u0026gt; { List\u0026lt;bool\u0026gt; _isSelected = []; List\u0026lt;Movie\u0026gt; _movies = []; int _selectedIndex = 0; @override void initState() { super.initState(); this.resembleMenuState(); } @override void didUpdateWidget(_ToggleButtons oldWidget) { super.didUpdateWidget(oldWidget); this.resembleMenuState(); } void resembleMenuState() { this._isSelected = this.widget.menus.map\u0026lt;bool\u0026gt;((s) =\u0026gt; false).toList(); this._isSelected[this._selectedIndex] = true; } @override Widget build(BuildContext context) { return Container( padding: EdgeInsets.all(10), child: ToggleButtons( children: this.widget.menus.map\u0026lt;Widget\u0026gt;((s) =\u0026gt; Text(s)).toList(), onPressed: (index) { setState(() { this._selectedIndex = index; this.resembleMenuState(); this.widget.onSelectedIndexChanged(index); }); }, isSelected: this._isSelected, ), ); } }   _MovieList  class _MovieList extends StatelessWidget { const _MovieList({ Key key, @required ScrollController scrollController, @required List\u0026lt;Movie\u0026gt; movies, }) : _scrollController = scrollController, _movies = movies, super(key: key); final ScrollController _scrollController; final List\u0026lt;Movie\u0026gt; _movies; @override Widget build(BuildContext context) { return Expanded( child: ListView.separated( controller: this._scrollController, itemBuilder: (context, index) { final movie = this._movies[index]; return ListTile( onTap: () { Navigator.push(context, MaterialPageRoute(builder: (context) =\u0026gt; MovieDetailPage())); }, title: Container( padding: EdgeInsets.symmetric(vertical: 5), child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: \u0026lt;Widget\u0026gt;[ Avatar(width: 90, height: 120), SizedBox(width: 15), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Text(movie.title), Text(movie.release_date), Text(movie.overview), ], ), ) ], ), ), ); }, separatorBuilder: (context, index) =\u0026gt; Divider(height: 1), itemCount: this._movies.length, ), ); } }  MovieDetailPage PersonPage Provider Providerは何？ State managementのパッケージで、以下の昨日が整備される\n InheritedWidgetのsyntactic sugar 下位、上位とシブリングWidgetのデータフロー安易にできる DI 基本的にStatelessWidgetを使用し、メンテしやすいアプリを実現する  インストール  pubspec.yaml  dependencies: # 追加 provider:  アイデア  上位WidgetはProviderと呼ばれ、下位に共有データを宣言する 下位WidgetはConsumerと呼ばれ、どのレベルにあっても、上位Widgetのデータを取得ができる Provider.of\u0026lt;type\u0026gt;は自動に現在のWidgetを起点にtypeとマッチする最初のデータを取得する。  class HomeScreen extends StatelessWidget { @override Widget build(BuildContext context) { return Provider\u0026lt;String\u0026gt;.value(value: \u0026quot;Thanh Chung\u0026quot;, child: GreetingWidget()); } } class GreetingWidget extends StatelessWidget { @override Widget build(BuildContext context) { return Consumer\u0026lt;String\u0026gt;( builder: (context, value, child) { return Text(\u0026quot;Hello $value\u0026quot;); }, ); // 下記の書き方は同じ。短くて、便利だね // final value = Provider.of\u0026lt;String\u0026gt;(context); // return Text(\u0026quot;Hello $value\u0026quot;); } }  ChangeNotifier データが変更するに当たって通知機能をもつクラス\nMVVMパータン Flutterでよく採用されるパターン\n M: Model アプリモデル V: View Widgetを指す。基本的にStatelessWidgetを使用する VM: ViewModel Widgetの表示データ、アクション等  StatelessWidgetを使うべき  状態が変更できない為、上位のProviderとしてStatefulWidgetを配置 ConsumerパターンでStatelessWidgetを作る  BaseWidget\nclass BaseWidget\u0026lt;T extends ChangeNotifier\u0026gt; extends StatefulWidget { final Widget Function(BuildContext context, T model, Widget child) builder; final T model; final Widget child; final Function(T) onModelReady; BaseWidget({ Key key, this.builder, this.model, this.child, this.onModelReady, }) : super(key: key); _BaseWidgetState\u0026lt;T\u0026gt; createState() =\u0026gt; _BaseWidgetState\u0026lt;T\u0026gt;(); } class _BaseWidgetState\u0026lt;T extends ChangeNotifier\u0026gt; extends State\u0026lt;BaseWidget\u0026lt;T\u0026gt;\u0026gt; { T model; @override void initState() { model = widget.model; if (widget.onModelReady != null) { widget.onModelReady(model); } super.initState(); } @override Widget build(BuildContext context) { return ChangeNotifierProvider\u0026lt;T\u0026gt;( builder: (context) =\u0026gt; model, child: Consumer\u0026lt;T\u0026gt;( builder: widget.builder, child: widget.child, ), ); } }  HomeViewModel view_models/home_vm.dart\nimport 'dart:math'; import 'package:flutter/material.dart'; import 'package:flutter_movies/models/models.dart'; final random = Random(); class HomeViewModel extends ChangeNotifier { String appBarTitle = ''; List\u0026lt;String\u0026gt; menus = ['Popular', 'Top Rated', 'Upcoming', 'Now Playing']; List\u0026lt;Movie\u0026gt; movies = []; int selectedIndex = 0; List\u0026lt;bool\u0026gt; get isSelected { List\u0026lt;bool\u0026gt; results = this.menus.map\u0026lt;bool\u0026gt;((s) =\u0026gt; false).toList(); results[this.selectedIndex] = true; return results; } HomeViewModel() { this.appBarTitle = this.menus[this.selectedIndex]; } void changeSelectedMenu(int targetIndex) { this.selectedIndex = targetIndex; this.appBarTitle = this.menus[targetIndex]; this.notifyListeners(); } void fetchMovies() async { this.movies = []; this.notifyListeners(); await Future.delayed(Duration(milliseconds: 300)); this.movies = List.generate( random.nextInt(30) + 10, (index) =\u0026gt; Movie( title: \u0026quot;Title ${index + 1}\u0026quot;, release_date: \u0026quot;2019-01-01\u0026quot;, overview: \u0026quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temportempor\u0026quot;, ), ); this.notifyListeners(); } }  Stateless HomePage  BaseWidgetを使って、HomePageをStatelessWidgetに bodyは引数必要なく、非常に分かりやすくなったね。 ** home_page.dart**  class HomePage extends StatelessWidget { @override Widget build(BuildContext context) { return BaseWidget\u0026lt;HomeViewModel\u0026gt;( model: HomeViewModel(), onModelReady: (vm) { vm.fetchMovies(); }, builder: (context, vm, child) { return Scaffold( appBar: AppBar( title: Text(vm.appBarTitle), actions: \u0026lt;Widget\u0026gt;[ IconButton( icon: Icon(Icons.search), onPressed: () { Navigator.push(context, NoAnimationRoute(builder: (context) =\u0026gt; SearchPage())); }, ) ], ), body: Column( children: \u0026lt;Widget\u0026gt;[ // 引数はなくなった _ToggleButtons(), _MovieList(), ], ), ); }, ); } }  _ToggleButtons, _MovieList\nclass _ToggleButtons extends StatelessWidget { @override Widget build(BuildContext context) { final vm = Provider.of\u0026lt;HomeViewModel\u0026gt;(context); return Container( padding: EdgeInsets.all(10), child: ToggleButtons( children: vm.menus.map\u0026lt;Widget\u0026gt;((s) =\u0026gt; Text(s)).toList(), onPressed: (index) { vm.changeSelectedMenu(index); }, isSelected: vm.isSelected, ), ); } } class _MovieList extends StatelessWidget { @override Widget build(BuildContext context) { final vm = Provider.of\u0026lt;HomeViewModel\u0026gt;(context); return Expanded( child: ListView.separated( itemBuilder: (context, index) { final movie = vm.movies[index]; return ListTile( onTap: () { Navigator.push(context, MaterialPageRoute(builder: (context) =\u0026gt; MovieDetailPage())); }, title: Container( padding: EdgeInsets.symmetric(vertical: 5), child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: \u0026lt;Widget\u0026gt;[ Avatar(width: 90, height: 120), SizedBox(width: 15), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Text(movie.title), Text(movie.release_date), Text(movie.overview), ], ), ) ], ), ), ); }, separatorBuilder: (context, index) =\u0026gt; Divider(height: 1), itemCount: vm.movies.length, ), ); } }   WidgetはUIの役割だけに簡潔になった 処理は全てViewModelで行う。  これで、Widgetに触れなくても処理改修ができるので、scalabilityは向上したね。\n残画面 MovieDetailPage Refactoring\nclass MovieDetailPage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( body: CustomScrollView( slivers: \u0026lt;Widget\u0026gt;[ SliverAppBar( expandedHeight: 180, pinned: true, elevation: 0, flexibleSpace: FlexibleSpaceBar( title: Text(\u0026quot;Joker\u0026quot;), background: Stack( children: [ Positioned.fill( child: Container(color: Colors.blue), ), ], ), ), ), SliverList( delegate: SliverChildListDelegate( [ _Poster(), divider, Reviews(), divider, _Overview(), divider, _Credit(), divider, _Credit(), divider, ], ), ) ], ), ); } }  各Componentsを作ってみてください。\nまとめ  MVVMパータンベースでRefactoringを紹介した。 Providerを使って、拡張性が良い状態管理を実装した。 次回はMoviesのAPIを使って、ネットワークのデータを撮りに行って、生々しいアプリを作ろう。  ","id":1,"section":"posts","summary":"ゴール Refactoring Providerの使い方 StatelessWidgetを最優先に使用する考え方 Refactoring 全てmain.dartに記述し、管理できない状態にな","tags":["iOS","flutter","crossplatform"],"title":"[Flutter]iOSアプリチュートリアルPart5 - MVVM, Refactoring, Provider","uri":"https://thanhchungbtc.github.io/2019/11/movie-app-tutorial-part5/","year":"2019"},{"content":"今回は画面のインタラクションや状態管理を追加します。\n ゴール\n StatelessWidgetvsStatefulWidget理解 StatefulWidgetでインタラクティブ画面が作成できます。   StatelessWidget vs StatefulWidget  StatelessWidget:constructor時に渡されるデータからどう構成するか記載するだけで、構成をビルドすると変更がありません。 StatefulWidget:Widgetの状態（変数、属性）を持ち、その状態によって画面構成が変動。\n  【例】\n  TextFieldはStatelessWidgetかStatefulWidgetか？\n👉 ユーザーの入力値を持ち、描画内容が変わるので、StatefulWidgetですね。\n  Textは？\n👉 インスタンスするときのテキストを表示し、変更ができない為、StatelessWidgetですね。\n  StatelessWidget buildメソッドでWidgetの構成を宣言します。\nclass HelloWorld extends StatelessWidget { @override Widget build(BuildContext context) { return Text(\u0026quot;Hello World\u0026quot;); } }  StatefulWidget StatelessWidgetより複雑なので、Life cycleメソッド理解する必要があります。\n【例】\nclass HelloWorld extends StatefulWidget { final String name; const HelloWorld({Key key, this.name}) : super(key: key); @override _HelloWorldState createState() =\u0026gt; _HelloWorldState(); } class _HelloWorldState extends State\u0026lt;HelloWorld\u0026gt; { String message; @override void initState() { super.initState(); // parentのデータを元に、Widgetのデータをセット this.message = \u0026quot;Hello ${this.widget.name}\u0026quot;; } @override Widget build(BuildContext context) { return Text(this.message); } }    createState()\nWidgetの状態をもつObjectを作成します。\n👉_HelloWorldState: _はプライベートを表します。Dartにはよく使われる宣言パータン。\n👉HelloWorldはparent, _HelloWorldStateはchildと呼ばれることが多いです。\n  initState()\nWidgetをインスタンスする時、最初に呼び出されるメソッド parentのデータを元に自分の変数をイニシャライズ\n  didChangeDependencies()\nDependencyを変える時実行されるが、次は必ずbuildを実行する為、usecaseがよく分かりません😅\nnetwork requestを実行すると思うが、buildは常に重たいので、side effectは避けるべきです。\n  build()\nWidgetの構成定義する一番重要メソッドですね。\n  didUpdateWidget()\nparentデータが変更されたさい、自分でもつ変数更新等の役割です。\n  setState()\nWidget状態を変更時に、リビルドの必要なことをframeworkに通知するメソッド\n  dispose()\nWidgetがいらなくなった時、リソースを開放する処理の記載\n  HomePage StatefulWidgetに変更 class HomePage extends StatefulWidget { @override _HomePageState createState() =\u0026gt; _HomePageState(); } class _HomePageState extends State\u0026lt;HomePage\u0026gt; { @override Widget build(BuildContext context) { // 省略 } }  ショートカットボタン class _HomePageState extends State\u0026lt;HomePage\u0026gt; { // 状態変数 List\u0026lt;bool\u0026gt; _isSelected = []; List\u0026lt;String\u0026gt; _menus = ['Popular', 'Top Rated', 'Upcoming', 'Now Playing']; @override void initState() { super.initState(); // 初期化 this._isSelected = this._menus.map\u0026lt;bool\u0026gt;((s) =\u0026gt; false).toList(); // 最初のアイテムを「選択中」に設定 this._isSelected[0] = true; } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('Popular'), actions: \u0026lt;Widget\u0026gt;[ IconButton( icon: Icon(Icons.search), onPressed: () { Navigator.push( context, NoAnimationRoute( builder: (context) =\u0026gt; SearchPage(), ), ); }, ) ], ), body: Column( children: \u0026lt;Widget\u0026gt;[ Container( padding: EdgeInsets.all(10), child: ToggleButtons( children: this._menus.map\u0026lt;Widget\u0026gt;((s) =\u0026gt; Text(s)).toList(), onPressed: (index) { setState(() { // タップしたアイテムだけは「選択中」に設定 for (int i = 0; i \u0026lt; this._isSelected.length; i++) { if (i == index) { this._isSelected[i] = true; } else { this._isSelected[i] = false; } } }); }, isSelected: this._isSelected, ), ), // 省略 ], ), ); } }  Movie一覧  Movieオブジェクトを作ります。  class Movie { final String title; final String release_date; final String overview; Movie({ this.title, this.release_date, this.overview, }); }   release_dateの名称になんか違和感を感じましたか？\n実はreleaseDateが望ましいけど、今回APIと連携する予定なので、API名称と合わせた方が楽だなと〜。\n  一覧更新  // 追加 List\u0026lt;Movie\u0026gt; _movies = []; @override void initState() { super.initState(); // データフェッチ this._movies = List.generate( 10, (index) =\u0026gt; Movie( title: \u0026quot;Title ${index + 1}\u0026quot;, release_date: \u0026quot;2019-01-01\u0026quot;, overview: \u0026quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temportempor\u0026quot;, ), ); }  @override Widget build(BuildContext context) { // 省略 Expanded( child: ListView.separated( itemBuilder: (context, index) { // 1. 行データ取得 final movie = this._movies[index]; return ListTile( onTap: () { Navigator.push(context, MaterialPageRoute(builder: (context) =\u0026gt; MovieDetailPage())); }, title: Container( padding: EdgeInsets.symmetric(vertical: 5), child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: \u0026lt;Widget\u0026gt;[ Avatar(width: 90, height: 120), SizedBox(width: 15), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Text(movie.title), Text(movie.release_date), Text(movie.overview), ], ), ) ], ), ), ); }, separatorBuilder: (context, index) =\u0026gt; Divider(height: 1), // 2. Listの行数 itemCount: this._movies.length, ), ), }  結果 class _HomePageState extends State\u0026lt;HomePage\u0026gt; { List\u0026lt;bool\u0026gt; _isSelected = []; List\u0026lt;String\u0026gt; _menus = ['Popular', 'Top Rated', 'Upcoming', 'Now Playing']; List\u0026lt;Movie\u0026gt; _movies = []; String _title = ''; final _scrollController = ScrollController(); final random = Random(); @override void initState() { super.initState(); this._isSelected = this._menus.map\u0026lt;bool\u0026gt;((s) =\u0026gt; false).toList(); // 最初のアイテムを「選択中」に設定 this._isSelected[0] = true; this._title = this._menus[0]; this.fetchMovies(); } void fetchMovies() { this._movies = List.generate( random.nextInt(30) + 10, (index) =\u0026gt; Movie( title: \u0026quot;Title ${index + 1}\u0026quot;, release_date: \u0026quot;2019-01-01\u0026quot;, overview: \u0026quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temportempor\u0026quot;, ), ); if (this._scrollController.hasClients) { this._scrollController.animateTo(0, duration: Duration(milliseconds: 300), curve: Curves.easeInOut); } } @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(this._title), actions: \u0026lt;Widget\u0026gt;[ IconButton( icon: Icon(Icons.search), onPressed: () { Navigator.push( context, NoAnimationRoute( builder: (context) =\u0026gt; SearchPage(), ), ); }, ) ], ), body: Column( children: \u0026lt;Widget\u0026gt;[ Container( padding: EdgeInsets.all(10), child: ToggleButtons( children: this._menus.map\u0026lt;Widget\u0026gt;((s) =\u0026gt; Text(s)).toList(), onPressed: (index) { setState(() { this._title = this._menus[index]; this.fetchMovies(); // タップしたアイテムだけは「選択中」に設定 for (int i = 0; i \u0026lt; this._isSelected.length; i++) { if (i == index) { this._isSelected[i] = true; } else { this._isSelected[i] = false; } } }); }, isSelected: this._isSelected, ), ), Expanded( child: ListView.separated( controller: this._scrollController, itemBuilder: (context, index) { final movie = this._movies[index]; return ListTile( onTap: () { Navigator.push(context, MaterialPageRoute(builder: (context) =\u0026gt; MovieDetailPage())); }, title: Container( padding: EdgeInsets.symmetric(vertical: 5), child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: \u0026lt;Widget\u0026gt;[ Avatar(width: 90, height: 120), SizedBox(width: 15), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Text(movie.title), Text(movie.release_date), Text(movie.overview), ], ), ) ], ), ), ); }, separatorBuilder: (context, index) =\u0026gt; Divider(height: 1), itemCount: this._movies.length, ), ), ], ), ); } }  まとめ StatefulWidgetを紹介しました。\n基本的にはStatefulWidgetを使えば、どんなインタラクティブ画面でも作れますが\nこれより複雑になると、痛くなり、現実ではないですね。\n次回は、Providerと言う状態管理ライブラリを使って、scalabilityを持たせましょう。\n","id":2,"section":"posts","summary":"今回は画面のインタラクションや状態管理を追加します。 ゴール StatelessWidgetvsStatefulWidget理解 Stateful","tags":["iOS","flutter","crossplatform"],"title":"[Flutter]iOSアプリチュートリアルPart4 - インタラクティブ","uri":"https://thanhchungbtc.github.io/2019/10/movie-app-tutorial-part4/","year":"2019"},{"content":"if (empty($someVar)) { // do something }  こんなのコードを書いたことがありますか。\nObjectはnullかどうか、文字列の場合は\u0026quot;\u0026quot;かどうか、数値は0かどうか、配列は[]かどうか等とても便利なメソッドですね。\nでも、今回はこんな簡単なことで、膨大なシステムの検討し、修正に至りました。\n問題 https://www.php.net/manual/ja/function.empty.phpによると、次のような値は空であるとみなされます。\n \u0026quot;\u0026rdquo; (空文字列) 0 (整数 の 0) 0.0 (浮動小数点数の 0) \u0026ldquo;0\u0026rdquo; (文字列 の 0) NULL FALSE array() (空の配列)  なんと**\u0026ldquo;0\u0026rdquo;**の文字列なのに、空とみなされています！！\nこれだと、例えば必須項目に\u0026quot;0\u0026quot;を入力したにも関わらず、未入力として変な処理になったりとか。。。\n残念ながら、携わっているシステムはみんなemptyでしたので、再検討、修正、リリースに大変なことでした。\n対策  新しいis_blank関数を作りました。  if (!function_exists('is_blank')) { function is_blank($value) { return empty($value) \u0026amp;\u0026amp; !is_numeric($value); } }   Unit test  class IsBlankTest extends TestCase { public function testIsBlank() { $input = '文字列'; $this-\u0026gt;assertFalse(!isset($input) || is_blank($input)); $input = ''; $this-\u0026gt;assertTrue(!isset($input) || is_blank($input)); $input = ' '; $this-\u0026gt;assertFalse(!isset($input) || is_blank($input)); $input = 0; $this-\u0026gt;assertFalse(!isset($input) || is_blank($input)); $input = 0.0; $this-\u0026gt;assertFalse(!isset($input) || is_blank($input)); $input = '0'; $this-\u0026gt;assertFalse(!isset($input) || is_blank($input)); $input = null; $this-\u0026gt;assertTrue(!isset($input) || is_blank($input)); $input = false; $this-\u0026gt;assertTrue(!isset($input) || is_blank($input)); $input = []; $this-\u0026gt;assertTrue(!isset($input) || is_blank($input)); $this-\u0026gt;assertTrue(!isset($undefinedVar) || (empty($undefinedVar) \u0026amp;\u0026amp; !is_numeric($undefinedVar))); } }   使いかた  if(!isset($someVar) || is_blank($someVar)) { // do something }  最後に 人を聞くと、こんな書き方は結構使われているようなので、\nこの記事を読んでいただいた人に、こんなことにならないように願っています。\n","id":3,"section":"posts","summary":"if (empty($someVar)) { // do something } こんなのコードを書いたことがありますか。 Objectはnullかどうか、文字列の場合は\u0026quot;\u0026quot;かどうか、数値は","tags":["php"],"title":"[PHP]Empty関数の問題","uri":"https://thanhchungbtc.github.io/2019/09/php-empty/","year":"2019"},{"content":" ゴール\n Navigatorで画面遷移 Routeをカスタマイズ Widgetの構成の応用   Part2では基本的なWidgetを学習し、ホーム画面を作りました。 今回は画面遷移Navigatorと残りの画面を作りましょう。\n 事前準備：Simulatorを立ち上げて、Intellijでデバッグ起動 少しThemeデータをカスタマイズ  class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { final theme = ThemeData( primarySwatch: Colors.purple, ); return MaterialApp( theme: theme.copyWith( primaryColor: Colors.white, primaryIconTheme: theme.primaryIconTheme.copyWith(color: Colors.grey), primaryColorBrightness: Brightness.light, primaryTextTheme: theme.textTheme, appBarTheme: theme.appBarTheme.copyWith( elevation: 1.0, ), ), home: HomePage(), ); } }  Navigator Flutterでは画面のことはroutesと言います。route遷移はNavigatorで行います。\n流れ  routesを作成（インスタンス）、例A routeとB route Navigator.push()でB routeへ遷移します。 Navigator.pop()でA routeに戻ります。  MovieDetailPage遷移  main.dartに詳細画面を追加  class MovieDetailPage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('Details'), ), body: Container(), ); } }   Movies一覧をタップすると、詳細画面へ遷移します。  Expanded( child: ListView.separated( itemBuilder: (context, index) { // 1. return ListTile( onTap: () { // 2. Navigator.push(context, MaterialPageRoute(builder: (context) =\u0026gt; MovieDetailPage())); }, title: Container( // 略     ListTile:リストアイテムを定義する際によく出てくるパターンが用意され、便利なWidgetです。\nAvatar, Title, Subtitle, AccesoryView等が簡単に宣言できます。    MaterialPageRouteで画面遷移を行います。他にはCupertinoPageRouteがあります。    Routeをカスタマイズ、SearchPage作成 Youtubeのように、🔎をタップすると、アニメションなしで検索画面へ遷移します。\nclass NoAnimationRoute extends MaterialPageRoute { NoAnimationRoute({WidgetBuilder builder}) : super(builder: builder); @override Duration get transitionDuration =\u0026gt; Duration.zero; }   検索ボタンを追加  class SearchPage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( leading: IconButton( icon: Icon(Icons.arrow_back), onPressed: () { Navigator.pop(context); }, ), title: TextField( decoration: InputDecoration( border: InputBorder.none, hintText: \u0026quot;Search\u0026quot;, ), ), actions: \u0026lt;Widget\u0026gt;[ IconButton( icon: Icon(Icons.clear), onPressed: () {}, ) ], ), body: Container(), ); } }  MovieDetailPageを作成 SliverAppBar SliverAppBarはAppBarとの同じ役割だが、高さが調整や表示内容が変更することができます。\nclass MovieDetailPage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( // 1. body: CustomScrollView( slivers: \u0026lt;Widget\u0026gt;[ SliverAppBar( expandedHeight: 220, pinned: true, elevation: 0, flexibleSpace: FlexibleSpaceBar( title: Text(\u0026quot;Joker\u0026quot;), background: Stack( children: [ Positioned.fill( child: Container(color: Colors.blue), ), ], ), ), ), // 2. SliverList( delegate: SliverChildListDelegate() ), ], ), ); } }     SliverAppBarを使う為に、CustomScrollViewを使用します。標準のAppBarも不要になるので、削除しました。    SliverList: CustomScrollViewに対応する特別Listです。    Custom Avatar Widget 使用箇所が多いので、共通Widgetにしましょう。\nclass Avatar extends StatelessWidget { final double width; final double height; const Avatar({Key key, this.width, this.height}) : super(key: key); @override Widget build(BuildContext context) { return Container( width: width, height: height, color: Colors.green, ); } }  画面作成  ポイント\n 全体はListで構成 横方向スクロール行はHorizontal Listを使います。 アイテムをタップする為に、InkWellを使います。   const divider = Divider(height: 1.0); class MovieDetailPage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( body: CustomScrollView( slivers: \u0026lt;Widget\u0026gt;[ SliverAppBar( expandedHeight: 180, pinned: true, elevation: 0, flexibleSpace: FlexibleSpaceBar( title: Text(\u0026quot;Joker\u0026quot;), background: Stack( children: [ Positioned.fill( child: Container(color: Colors.blue), ), ], ), ), ), SliverList( delegate: SliverChildListDelegate( [ // Poster Padding( padding: const EdgeInsets.all(10.0), child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: \u0026lt;Widget\u0026gt;[ Avatar(width: 90, height: 120), SizedBox( width: 15, ), ], ), ), divider, // Reviews Container( padding: EdgeInsets.symmetric(horizontal: 15, vertical: 15), child: Text( 'reviews', style: Theme.of(context).textTheme.subhead, ), ), divider, // Overview Container( padding: EdgeInsets.all(10), child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Text('Overview:', style: Theme.of(context).textTheme.title), SizedBox(height: 5), Text( \u0026quot;During the 1980s, a failed stand-up comedian is driven insane and turns to a life of crime and chaos in Gotham City...\u0026quot;, style: Theme.of(context).textTheme.body2, ), ], ), ), divider, // Cast Container( padding: EdgeInsets.all(10), child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Text('Cast', style: Theme.of(context).textTheme.title), SizedBox(height: 5), Container( height: 130, child: ListView.builder( itemBuilder: (context, index) { return InkWell( onTap: () { Navigator.push(context, MaterialPageRoute(builder: (context) { return PersonPage(); })); }, child: Container( height: 180, width: 80, padding: EdgeInsets.symmetric(horizontal: 10), child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Avatar(width: 60, height: 90), SizedBox(height: 5), Text( \u0026quot;Johnson\u0026quot;, maxLines: 1, textAlign: TextAlign.center, ), Text( \u0026quot;Author\u0026quot;, maxLines: 1, textAlign: TextAlign.center, ), ], ), ), ); }, scrollDirection: Axis.horizontal, ), ) ], ), ), divider, // Crew Container( padding: EdgeInsets.all(10), child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Text('Crew', style: Theme.of(context).textTheme.title), SizedBox(height: 5), Container( height: 130, child: ListView.builder( itemBuilder: (context, index) { return Container( height: 180, width: 80, padding: EdgeInsets.symmetric(horizontal: 10), child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Avatar(width: 60, height: 90), SizedBox(height: 5), Text( \u0026quot;Johnson\u0026quot;, maxLines: 1, textAlign: TextAlign.center, ), Text( \u0026quot;Author\u0026quot;, maxLines: 1, textAlign: TextAlign.center, ), ], ), ); }, scrollDirection: Axis.horizontal, ), ) ], ), ), divider, ], ), ) ], ), ); } }  プロファイル画面を作成 const _padding = EdgeInsets.all(10); class PersonPage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(\u0026quot;Johnson\u0026quot;), ), body: ListView( children: \u0026lt;Widget\u0026gt;[ // Avatar Container( padding: EdgeInsets.all(10), child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: \u0026lt;Widget\u0026gt;[ Container( width: 70, height: 100, color: Colors.green, ), SizedBox(width: 10), Column( children: \u0026lt;Widget\u0026gt;[Text(\u0026quot;Known for\u0026quot;), Text(\u0026quot;Acting\u0026quot;)], ) ], ), ), divider, // Biography Container( padding: _padding, child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Text('Biography'), Text( \u0026quot;Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temportempor\u0026quot;, maxLines: 3, ), Text('Place of birth'), Text(\u0026quot;San Juan, Puerto Rico\u0026quot;), ], ), ), divider, // Images Container( padding: EdgeInsets.only(bottom: 20), child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Padding( padding: _padding, child: Text(\u0026quot;Images\u0026quot;), ), Container( height: 100, child: ListView.builder( itemBuilder: (context, index) { return Padding( padding: const EdgeInsets.symmetric(horizontal: 5), child: Avatar(width: 70, height: 100), ); }, scrollDirection: Axis.horizontal, ), ) ], ), ), divider, // Movie list Container( color: Colors.grey.shade200, padding: EdgeInsets.symmetric(horizontal: 10, vertical: 5), child: Text(\u0026quot;Upcoming\u0026quot;), ), divider, ...List.generate( 10, (index) =\u0026gt; Container( padding: EdgeInsets.all(10), child: Row( children: \u0026lt;Widget\u0026gt;[ Avatar( width: 80, height: 110, ), SizedBox(width: 10), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Text(\u0026quot;Far BrightStar\u0026quot;), ], ), ) ], ), ), ), ], ), ); } }  まとめ 今回は全画面を作りましたね。\n作り込みは簡単ですが、これぐらいWidgetを使いこなせば、\n基本的により複雑な構成の画面も作れると思いますので、手を触れてみてください。\nただ、現在の画面は何もアクションができず、static画面ので、次回はインタラクションを追加しましょう。\n","id":4,"section":"posts","summary":"ゴール Navigatorで画面遷移 Routeをカスタマイズ Widgetの構成の応用 Part2では基本的なWidgetを学習し、ホーム画面を作","tags":["iOS","flutter","crossplatform"],"title":"[Flutter]iOSアプリチュートリアルPart3 - Navigator、応用Widget","uri":"https://thanhchungbtc.github.io/2019/09/movie-app-tutorial-part3/","year":"2019"},{"content":"前回はFlutterについて紹介とアプリのWireframeを作りました。\nこれから、コードを手がけましょう。\n ゴール\n 基本のWidgetを理解 レイアウトベーシック   ホーム画面  事前準備   Simulator起動\nTerminal上にflutter runを実行\n Hello World main.dartの内容を全部削除し、以下のコードを挿入\nimport 'package:flutter/material.dart'; // 1. void main() =\u0026gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { // 2. return MaterialApp( theme: ThemeData(primarySwatch: Colors.purple), home: HomePage(), ); } } class HomePage extends StatelessWidget { @override Widget build(BuildContext context) { // 3. return Scaffold( appBar: AppBar( title: Text('Home'), ), body: Container(), ); } }   main():例の入り口ですね。アプリのDependencyの初期化理想な場所   ES6のArrow関数と似ている構文ですね。 // TODO Dart 関数記載\n MaterialApp: Widget Treeの最上位。テーマやルーティング定義   テーマ色がたくさん内臓されるので、好きに試みてください。\n Scaffold: Materialデザインの画面レイアウトを定義するWidget 基本はappBarとbodyが含まれます。 また、 Drawer、 Snackbar, BottomSheetを使用する為、APIも用意されています。  ホーム画面レイアウト class HomePage extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text('Popular'), ), // 1. body: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ // 2. Container(height: 40, color: Colors.blue, child: Center(child: Text('ショートカットボタン'))), // 3. Expanded(child: Container(color: Colors.green, child: Center(child: Text('Movie一覧')))), ], ), ); } }   Column:子供を縦方向並んで、反対はRowWidgetがあります。 定義の通り、高さ40の青ボックス(Container)を用意し、真ん中(Center)にテキスト(Text)を配置します。 Expanded:Columnは高さ変動するので、可能な範囲、全スペースを使用したい時使用されるWidgetです。  ショートカットボタン body: Column( children: \u0026lt;Widget\u0026gt;[ Container( padding: EdgeInsets.all(10), // 1 child: ToggleButtons( children: \u0026lt;Widget\u0026gt;[ Text('Popular'), Text('Top Rated'), Text('Upcoming'), Text('Now Playing'), ], onPressed: (index) { // TODO: implements }, isSelected: \u0026lt;bool\u0026gt;[true, false, false, false], ), ), Expanded(child: Container(color: Colors.green, child: Center(child: Text('Movie一覧')))), ], ),   ToggleButtons: オンとオフの２状態を持つ横方向に並ぶ配列のボタンです。  Movie一覧 Expanded( // 1. child: ListView.separated( itemBuilder: (context, index) { return Container( padding: EdgeInsets.symmetric(horizontal: 10, vertical: 10), // 2. child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: \u0026lt;Widget\u0026gt;[ Container(color: Colors.green, width: 90, height: 120), SizedBox(width: 15), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.stretch, children: \u0026lt;Widget\u0026gt;[ Text('Title'), Text('2019-10-02'), Text( 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod temportempor'), ], ), ) ], ), ); }, separatorBuilder: (context, index) =\u0026gt; Divider(height: 1), itemCount: 10, ), ),   ListView:子供を並んで表示するが、大量データを持って、スクロールができる特徴です。   itemBuilder: 表示必要アイテムだけは計算するので、そのアイテムの計算方法の記述callbackです。  Row: Columnと同じですが、子供を横並びます。   注1: RowとColumnはスクロールができないので、表示切れない場合はこんなWarningが出ます。\nスクロールしたいでしたら、Listを使いましょう。   注2: Cross AxisとMain Axisについて  画像：flutter.dev\n 注3: Webのフレックスボックスのような自動改行したい場合、WrapのWidgetがあります。\n  まとめ 基本的なWidgetを紹介しました。 大体の画面はこれらのWidgetで構成されますので、使いこなすのがおすすめです。\n Row, Column, Wrap List Container, SizedBox Text, ToggleButtons Padding, Center, Expanded  ","id":5,"section":"posts","summary":"前回はFlutterについて紹介とアプリのWireframeを作りました。 これから、コードを手がけましょう。 ゴール 基本のWidgetを理解 レ","tags":["iOS","flutter","crossplatform"],"title":"[Flutter]iOSアプリチュートリアルPart2 - 基本Widget","uri":"https://thanhchungbtc.github.io/2019/08/movie-app-tutorial-part2/","year":"2019"},{"content":"Flutterでモバイルアプリを作ってよう モバイルアプリってAndroid=Java, iOS=Swiftのメインですね。\nただ、各OSの対応バージョンを開発するのは時間がかかりますし、一度アプリを作れば両方対応できるcross platformはいくつか存在しています。\n本来ならばcrossplatformを使えば、楽でいけるはずだが、実際はそう簡単ではありません。\n  Hybridアプリ(Cordova等): HTML,JSでWebsiteのようなアプリを作って、モバイル上に動かせます。\nアプリ自体はWebViewであり、本質はWebなので、スピードは期待できない特徴です。\n  ReactNative: 「JSブリッジ」というアプリとOSの中間にある橋を使って、第３言語（主にJS)でcross platformを実現します。\nまた、ReactNativeはHot Reloadというコード書きながら、即時結果確認できるので、人気がありそうです。\n問題は、アプリを動作するには、橋を渡って、OSに指示を出しなければならない為、その橋が混雑な状態になると、\n急激なスピード減少等に至るので、注意する必要があります。\n  Flutter:Googleが開発した最新のMobile Application UI Frameworkです。\nReactNativeのような橋がなく、「本ネイティブ」と同等なレベルでアプリを動作するのが特徴です。\n直接OS下で動作するが、各OSのSDKを使用せず、自ら独特な実行環境を用意して、画面描画やイベント処理等全部その環境内で行います。\n理想的に言うと、Flutterを使えば、モバイルだけでなく、DesktopからWebまでどんな環境でも統一したUI、挙動を実現できるのです。\n  このシリーズでは実際のアプリを作りながら、Flutterについて理解していきます。\n ゴール\n flutterの基本的なWidgetの使い方。 状態管理（state management)理解、Providerの使い方。複雑な状態を簡単に作れます。 Http, Json, Rest APIを使って、ネットワークと繋がります。 Reactive programmingの基礎知識を理解します。 ‐ Performance向上、Isolate, Cache。 Animationで魅力的なアプリを作ります。 \u0026hellip;その他   1. Flutterとは  コードを一度書くだけで、全platform対応というwrite once, run everywhereのUIframeworkです。\n 1.1. 特徴、なぜ他のframeworkと違っているのでしょうか  FlutterはOSのSDKの頼らず、自ら画面を描画します。\n例えば、ReactNativeアプリでは「ここにボータン配置してね」というような指示をOSに指示し、OSはボータンを描画し、配置する一方、 FlutterはターゲットOSに近い形のボータンを描画し、配置します。 参照Link   Flutterで作られたアプリはNativeのように見えるかもしれないが、実はNativeではありません。\n   Hot reload\nコードを書きながら、即時コンパイルし、確認できる機能。これは本当に開発者の心に当たるポイントです。\n  NativeのARMコードにコンパイル\nリリースモードでビルドすると、ARMコードにコンパイルし、最高のスピードを実現します。\n  Material Themeはデフォルトに内蔵され、工夫せず、魅力的なアプリを安易に作れます。\n特にデザインに苦手な僕は、ありがたいところです。\n  Dartという言語\n「また新しい言語!!!」と思っちゃうですね。\nでも、C#やJavaと似ているので、すぐ覚えると思います。\n  1.2. なぜDartなのか？ DartコンパイラーはJITとAoTという2モードがある為、Flutterの開発方針を実現できるようです。\n JIT(Just in time)：HotReloadを実現させるモード。\n開発者に一番セルポイントです。 AoT(Ahead of time): 事前にNativeコードにコンパイルし（Cのように）、Flutterアプリの最高のスピードを実現させるモードです。  1.3. 「Everything is widget」という概念 画面に表示Button, Labelといったコンポーネントは全部Widgetと言います。\n表示しないLayoutの部分もWidgetと言い、まさに全てがWidgetです。\n1.4. Declarative Programming 今まで命令的のImperative手法でアプリを開発するのは多いと思いますが、\nFlutterはDelarative手法を使います。 \\\n 簡潔にいうと違い点は以下の通りです\n参照Link\nImperative手法  // Imperative style b.setColor(red) b.clearChildren() ViewC c3 = new ViewC(...) b.add(c3)  Declarative手法\n// Declarative style return ViewB( color: red, child: ViewC(...), )   ※構造(structure)だけは宣言し、その構造をどう作るのは任せるって感じですね。\n 2. どんなアプリをつくりますか。 2.1. Movies explorer MoviesのサービスAPIを使って、人気Moviesや俳優の情報を手に入れるアプリです。\n2.2. 画面のWireframe  Home画面 Search画面 詳細画面 レビュー画面 Profile画面  2.3. プロジェクト作成 Mac, Windows, Linux全部対応しますが、僕はMacなので、Macの内容でまとめます。\n ※iOSはMac環境で動作する必要です。\n #1. Flutterダウンロード ホームページ：https://flutter.dev/docs/get-started/install\n#2. Path設定  ~/.bash_profileを編集  # 以下、/path/to/flutterを自分のパスに変換し、保存 export PATH=\u0026quot;$PATH:/path/to/flutter/bin\u0026quot;  # 変更を適用する source ~/.bash_profile  #3. プロジェックと生成 cd /path/to/project/folder flutter create flutter_movies cd flutter_movies  #4. IDEを立ち上がります。 IntelliJ IDEAを推奨します。\nDownload Link: https://www.jetbrains.com/idea/download/\n#5. iOS/AndroidのSDKをインストール iOSの場合、Xcodeをインストールして、初期起動を済むと完了\n#6. Simulatorを起動 iOS SimulatorやAndroid Emulatorを起動してください。\n#7. アプリをビルド flutter run  結果 まとめ  Flutterは真のcross platformソリューションのひとつです。 FlutterはDeclarative Programmingを使用します。 開発時に、JITでHot Reloadを実現し、Release時AOTコンパイルも最高のパーフォーマンスを実現します。  Part 2\n","id":6,"section":"posts","summary":"Flutterでモバイルアプリを作ってよう モバイルアプリってAndroid=Java, iOS=Swiftのメインですね。 ただ、各OSの対応バ","tags":["iOS","flutter","crossplatform"],"title":"[Flutter]iOSアプリチュートリアルPart1 - 始めに","uri":"https://thanhchungbtc.github.io/2019/08/movie-app-tutorial-part1/","year":"2019"},{"content":"ちょっとした感想を残しておきます。\nきっかけ 部門の飲み会でこの試験の話が出て、結構チャレンジした人が多いので、自分もやってみようと思った。\n受験後の感想 すごい長くて、疲れたと印象。\n 午前問題は大体過去問題の使い回しなので、準備しておけば、できる感じ 午後問題\n日本語の長文まみれ、目が痛い。  試験で習得したこと  プログラミングは普段にやっているから、問題ないけど、マネジメントとストラレテジ系はかなり勉強になった。プロジェクト進行まわりの知識も面白いなと思っている セキュリティの問題もかなり実際に近い課題を出したと思うので、勉強になった。 後、用語の覚える機会も遭ったね。  勉強方法  午前：過去問題を解くのは大事だね。\n私は過去5年分(10部）を解いてきた。 午後：数量ではなく、質だね。\n2, 3年分の問題を解いてみて、回答を確認し、全部理解するまでしっかり勉強した方が良いと思う。  試験についての感想 試験の勉強過程でじっくり考える時間があるので、人により、習得できることが多いと思うね。\nただ、全く未経験者にはあまり向いていない試験だと感じる。\n今後の予定 特に考えていないけど、セキュリティの知識を身に付けたいので、情報セキュリティマネジメント試験かな\n","id":7,"section":"posts","summary":"ちょっとした感想を残しておきます。 きっかけ 部門の飲み会でこの試験の話が出て、結構チャレンジした人が多いので、自分もやってみようと思った。 受験","tags":null,"title":"基本情報技術者試験を合格してきた","uri":"https://thanhchungbtc.github.io/2019/05/passed-fe-shiken/","year":"2019"},{"content":"Việc gửi trẻ ở Nhật không giống với Việt Nam là thích gửi đâu cũng được, mà trước tiên bạn phải nộp hồ sơ xếp hàng và nếu đủ điều kiện thì mới được đi học. Khá là vất vả.\nGần đây mình cũng mới làm thủ tục cho thằng cu ở nhà nên note lại 1 số kinh nghiệm.\nSơ lược Hệ thống giáo dục mầm non ở Nhật là tự nguyện, và do 自治体(quận, thành phố) quản lý. Gồm các loại trường:\n 認可保育園 認定こども園  Ngoài ra tuỳ thành phố còn có:\n 認定こどもルーム  Trẻ dưới 3 tuổi được khuyến khích tốt nhất nên ở với Bố Mẹ nên nếu không có lý do chính đáng, không thể xin cho con đi học được. Chỉ có mấy trường hợp dưới đây là xin được.\n Cả Bố và Mẹ đều đi làm full time.(共働き) Bố hoặc Mẹ đi full time, người còn lại đi học \u0026gt; 64h/tháng Bố hoặc Mẹ đi full time, người còn lại đi làm part time \u0026gt; 64h/tháng  Các thủ tục cần thiết  就労証明書: giấy chứng nhận đi làm 在学証明書: giấy chứng nhận đi học スケジュール表:trong trường hợp đi học 申込書:Tờ khai nguyện vọng Nếu đang tìm việc thì cần nộp 承諾書  Việc khai tờ nguyện vọng thì lúc đầu mình chỉ viết có 3 trường, sau đấy đi nộp thì họ nói cứ viết càng nhiều càng tốt.\nVả kết cục là mình khai nguyện vọng những 20 trường.\nXét duỵệt thế nào Sau khi nộp hồ sơ thì họ sẽ đánh giá và cho bạn 1 số điểm tương ứng.\nNếu còn chỗ trống thì sẽ ưu tiên người có điểm số cao hơn vào trước. Thời gian xếp hàng không phải là hạng mục đánh giá nên cho dù bạn có xếp 1 năm mà luôn luôn có người điểm cao hơn bạn đang chờ thì bạn cũng không được vào.\nHọc phí Dựa vào mức đóng thuế thị dân (住民税)để quyết định.\n Trẻ dưới 3 tuổi thì phải đóng học phí (học phí đã bao gồm cả tiền ăn uống) Trẻ trên 3 tuổi thì được miễn học phí, chỉ phải đóng tiền ăn hàng tháng.  Kết quả 不承諾!\nSau đó thì họ có gọi và thông báo rằng trượt 保育園 nhưng ベビールーム thì vẫn còn chỗ trống nên có muốn vào không? ベビールーム thường chỉ là 1 phòng rất bé mà học phí lại đắt.\nMình cho con học được ở đấy gần 1 tháng thì phường gọi báo đỗ nguyện vọng 10😅 Thế là lại khăn gói chuyển trường.\n","id":8,"section":"posts","summary":"Việc gửi trẻ ở Nhật không giống với Việt Nam là thích gửi đâu cũng được, mà trước tiên bạn p","tags":["life"],"title":"Kinh nghiệm làm thủ tục gửi trẻ đi học nhà trẻ","uri":"https://thanhchungbtc.github.io/2019/03/thu-tuc-gui-tre/","year":"2019"},{"content":"Tham khảo https://www.vn.emb-japan.go.jp/itpr_ja/VN_SVisaFAM.html\nNgười xin visa   Hộ chiếu\n-\u0026gt; Bản gốc\n  Tờ khai visa (có dán ảnh)\n-\u0026gt; 1 bản gốc\nhttps://www.vn.emb-japan.go.jp/itpr_ja/VN_SVisaFAM.html\n  Tài liệu chứng minh quan hệ họ hàng với người mời\n-\u0026gt; Sổ hộ khẩu: Mang theo 1 bản gốc và 1 bản photo\n  Giấy tờ đặt vé (Khi nhận đc visa mới thanh toán)\n-\u0026gt; Bản gốc\n  Người mời và bảo lãnh   Giấy lý do mời\n-\u0026gt; BẢN GỐC\n-\u0026gt; Danh sách người xin visa\n-\u0026gt; Chú ý đóng dấu\n  Lịch trình\nChú ý là file này không thể lưu được nên viết xong phải in luôn\n  Nếu người mời bảo lãnh sang thì cần thêm:\n3. Giấy chứng nhận bảo lãnh gồm\n-\u0026gt; Giấy chứng nhận bảo lãnh 1 BẢN GỐC -\u0026gt; Chú ý đóng dầu\n-\u0026gt; Giấy chứng nhận nộp thuế có ghi tổng thu nhập\n-\u0026gt; Giấy số dư ngân hàng\n-\u0026gt; Phiếu công dân\n-\u0026gt; Photo 2 mặt thẻ ngoại kiều\n-\u0026gt; Photo hộ chiếu trang ảnh và trang liên quan đến xuất nhập cảnh và lưu trú\n-\u0026gt; Giấy chứng nhận đang làm việc xin từ công ty (在籍証明書)\nGửi giấy tờ về Việt Nam  Ra 郵便局 gửi chuyển phát nhanh EMS về Việt Nam. Chi phí hết khoảng 2000 yên tuỳ vùng  Sau bao lâu thì xong thủ tục  Khoảng 2 ngày - 1 tuần là nhận được là người ở Việt Nam nhận được giấy tờ Làm thủ tục ở Việt Nam mất khoảng 8 ngày làm việc  -\u0026gt; Tổng thời gian từ lúc làm giấy tờ đến lúc có visa khoảng 3 tuần nhưng các bạn nên làm trước khoảng 2 tháng để đề phòng tính huống phát sinh.\n","id":9,"section":"posts","summary":"Tham khảo https://www.vn.emb-japan.go.jp/itpr_ja/VN_SVisaFAM.html Người xin visa Hộ chiếu -\u0026gt; Bản gốc Tờ khai visa (có dán ảnh) -\u0026gt; 1 bản gốc https://www.vn.emb-japan.go.jp/itpr_ja/VN_SVisaFAM.html Tài liệu chứng minh quan hệ họ hà","tags":["life"],"title":"Thủ tục visa thăm thân - bảo lãnh Bố Mẹ sang Nhật chơi","uri":"https://thanhchungbtc.github.io/2018/12/thu-tuc-moi-gia-dinh-sang-nhat-choi/","year":"2018"},{"content":"バーナーとかで他サイトと連携することが普通だが、無害と考えているのに、不注意すると脆弱性がでてくることはご存じですか。\n意外と見逃しがちの攻撃なので、メモしておきます。\n問題 aタグで他サイトへ遷移する時に、遷移先ページでは現ページのlocationオブジェクトにアクセスができてしまって、\n悪質なアクションを行うことができる。\n具体的どんなことが起こりえる   あなたのサイトに他サイト遷移のリンク配置\n  ユーザーはリンクをクリックして、新しいタブで開く\n  ユーザーはあなたのサイトのタブに戻る 3は知らないうちに、あなたとのそっくりページが表示されている！！！\n  あなとのサイトへアクセスする\n  スポンサーページをクリックし、○○株式会社サイトへアクセスする\n  1のタブに戻って、ログインをする\n  ここで変わった点を気づいたか\n リンクURL：yoursite.com -\u0026gt; y0ursite.com 画面がそっくりだね。（デモの目的でメッセージを出したけど）  対策  aタグに rel=\u0026quot;noopener noreferrer\u0026rdquo; 属性を追加  まとめ  外部ページへアクセスするリンクは全て**rel=\u0026quot;noopener noreferrer\u0026rdquo;**に設定すること 本脆弱性は自サイトの問題ではなく、連携先側で攻撃を受けられた際、悪影響を及ぼす対策の必要なものである。  ","id":10,"section":"posts","summary":"バーナーとかで他サイトと連携することが普通だが、無害と考えているのに、不注意すると脆弱性がでてくることはご存じですか。 意外と見逃しがちの攻撃","tags":["security"],"title":"Anchor Phishing","uri":"https://thanhchungbtc.github.io/2018/08/anchor-phishing/","year":"2018"},{"content":"よく使われるコマンドをAliasに ~/.zshrc or ~/.bash_profile or whatever you use\n# append this line to the bottom source ~/.aliases  ~/.aliases\nalias gs=\u0026quot;git status\u0026quot; alias gl=\u0026quot;git log\u0026quot; alias gaa=\u0026quot;git add .\u0026quot; alias gc=\u0026quot;git commit -m \u0026quot; alias gclean=\u0026quot;git reset --hard \u0026amp;\u0026amp; clean -df\u0026quot; alias projects=\u0026quot;cd /Volumes/Data/projects \u0026quot; alias p=\u0026quot;phpunit \u0026quot; alias pf=\u0026quot;phpunit --filter \u0026quot;  source ~/.aliases  これで gsはgit status、gcはコミットなど便利に使える。\n複数Pythonバージョンがあっても、PATH変更せず、好みバージョン使用できる python2とpython3が混在な環境ではpython3コマンドを打つのは面倒だね。\n~/.aliases\nalias python=\u0026quot;python3\u0026quot;  デフォルトのTerminalより、**Oh My ZSH!**を使う メリットは様々だが、https://ohmyz.sh/をご確認ください\n","id":11,"section":"posts","summary":"よく使われるコマンドをAliasに ~/.zshrc or ~/.bash_profile or whatever you use # append this line to the bottom source ~/.aliases ~/.aliases alias gs=\u0026quot;git status\u0026quot; alias gl=\u0026quot;git log\u0026quot; alias gaa=\u0026quot;git add .\u0026quot; alias gc=\u0026quot;git commit -m \u0026quot; alias gclean=\u0026quot;git reset --hard \u0026amp;\u0026amp; clean -df\u0026quot; alias projects=\u0026quot;cd /Volumes/Data/projects \u0026quot; alias p=\u0026quot;phpunit \u0026quot; alias pf=\u0026quot;phpunit --filter \u0026quot; source ~/.aliases こ","tags":["linux","mac","tip"],"title":"開発マシンのTips","uri":"https://thanhchungbtc.github.io/2018/06/mac-dev-tips/","year":"2018"},{"content":"Docker上開発環境を構築してみた\n Stack: php, Laravel, nginx, postgres  各環境ファイル作成 docker-compose.yml\nversion: '3' services: nginx: build: ./nginx ports: - 8080:80 volumes: - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf - ./src:/var/www/app depends_on: - web web: build: ./src volumes: - ./src:/var/www/app depends_on: - db db: image: 'postgres:9.3' ports: - \u0026quot;5432:5432\u0026quot; env_file: - ./data/env_file volumes: # - ./data/postgres:/var/lib/postgresql/data - pgdata:/var/lib/postgresql/data # volumes: # pgdata:  data/env_file\nPOSTGRES_USER=postgres POSTGRES_DB=my_db POSTGRES_PASSWORD=postgres  nginx/nginx.conf\nserver { listen 80; server_name app; root /var/www/app; index index.php index.html; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; location / { try_files $uri $uri/ /index.php$is_args$args; } location ~ \\.php$ { fastcgi_pass web:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } }  サービスを起動 バックグランドで起動 docker-compose up -d  ここでweb, nginx, dbの３サービスが立ち上がって、localhost:8080アクセスできる\n再ビルドしてから起動 docker-compose up -d --build  解説   Dockerはデータを持たない為、再起動するとデータ損失\n  データ損失を防ぐ為、volumesを使用する\n  postgresイメージはenv_fileの情報でデータベースを作成する\n  postgresのデータをvolumesに格納すれば、データ維持できる\n  volumes: - ./data/postgres:/var/lib/postgresql/data   Windows環境ではなんだかこのようなvolumesマウントしかたは上手く行きそうにないのでで、ネームvolumesに修正した   FATAL: data directory \u0026ldquo;/var/lib/postgresql/data\u0026rdquo; has wrong ownership\n volumes: - pgdata:/var/lib/postgresql/data volumes: pgdata:   docker-compose up -dを実行すると、以下が起こる  myapp_defaultネットワークが作られる。 web, nginx, dbの３サービスが作成され、myapp_defaultにジョイン myapp_defaultネットワーク環境下で、名前でアクセス可能。\n例webからdbでデータベースをアクセス、\nnginxでwebを使って、webをアクセス\\    ","id":12,"section":"posts","summary":"Docker上開発環境を構築してみた Stack: php, Laravel, nginx, postgres 各環境ファイル作成 docker-compose.yml version: '3' services: nginx: build: ./nginx ports: - 8080:80 volumes: - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf - ./src:/var/www/app depends_on: - web web: build: ./src volumes: - ./src:/var/www/app depends_on: - db db: image: 'postgres:9.3' ports: - \u0026quot;5432:5432\u0026quot; env_file: - ./data/env_file volumes: #","tags":["docker"],"title":"[Docker]メモ","uri":"https://thanhchungbtc.github.io/2018/05/docker-memo/","year":"2018"},{"content":"Nhìn chung do có sự khác biệt lớn về văn hoá và người Nhật thì thường kỹ tính nền người nước ngoài khá là khó thuê nhà ở Nhật.\nMình cũng từng trải qua vài lần thuê nhà nên xin chia sẻ 1 chút ở đây\n1. Share house Nếu còn độc thân, thì share house là 1 lựa chọn khá tốt. Với chi phí hạn hẹp bạn vẫn có thể ở 1 căn nhà gần trung tâm và tiện nghi đầy đủ.\nĐặc biệt là thủ tục không lằng nhằng.\nƯu điểm Cơ bản thì 1 căn nhà lớn được chia làm nhiều phòng chung nhau nhà bếp và nhà tắm. Tuỳ theo mức giá tiền thì chất lượng phòng sẽ khác nhau nhưng nhìn chung:\n 1 người/phòng, đầy đủ đồ chỉ việc xách valy vào ở Các thiết bị như đồ bếp, nhà tắm khá mới và hiện đại, có người dọn vệ sinh hàng tuần và chuẩn bị giấy vệ sinh hay nước rửa bát, \u0026hellip; Với giá cả tầm 5-8man là có thể ở gần khu trung tâm tokyo, rất tiện cho việc đi lại Dễ dàng giao lưu kết bạn  Hạn chế  Tuy phòng riêng nhưng cách âm không tốt nên cần chú ý tiếng ồn.  Chỗ mình từng ở thì mấy bạn nước ngoài như Brazil và Đức thì rất dễ nói chuyện và hay ngồi giao lưu với nhau nhưng thi thoảng cũng bị bạn Nhật than phiền về việc ồn ào.\n Vẫn đề riêng tư như thư từ khá bất cập.  Thuê ở đâu? Mình thuê ở chỗ này: https://gghouse.co.jp/ Hỗ trợ cả tiếng Anh, Việt, thủ tục rất dễ dàng\n2. Thuê nhà riêng Cái này thì phức tạp hơn 1 chút và cũng đắt hơn sharehouse tương đối. Các công ty bất động sản đều có hỗ trợ người nước ngoài nên các bạn cứ mạnh dạn bước vào hỏi thôi Có các loại như\n マンション: nhà chung cư アパート: nhà trọ, thường là nhà thấp khoảng 2 - 3 tầng, giá tương đối rẻ  Chọn công ty BDS Ra ga khu vực muốn thuê nhà rồi tìm cong ty bất động sản.\nMình chọn Able vì chi phí môi giới chỉ bằng nửa so với chố khác.\nCác khoản phí đầu vào  仲介料　Phí môi giới: 1/2 ~ 1 tháng tiền nhà クリーニング　Phí dọn dẹp nhà lần đầu (tuỳ nhà), 0 ~ 1 tháng tiền nhà 鍵交換　Phí thay chìa khoá: 0 ~ 3man 敷金　Đặt cọc từ 1 ~ 2 tháng tiền nhà 礼金 Tiền lễ 0 ~ 2 tháng tiền nhà 保証料　Phí thuê công ty bảo lãnh thuê nhà 1 man ~ 1tháng tiền nhà  Khoản này hầu như là bắt buộc. Công ty này sẽ đứng ra chịu trách nhiệm với bên cho thuê về việc đóng tiền nhà hàng tháng của bạn 7. Ngoài ra tuỳ nhà còn phải nộp thêm 2 - 4 tháng tiền nhà trước\nPhù😂\nPhí thường niên  保証料: 1 năm 1 lần 更新料 phí gia hạn hợp đồng, 2 năm 1 lần 1 ~ 2 tháng tiền nhà  ","id":13,"section":"posts","summary":"Nhìn chung do có sự khác biệt lớn về văn hoá và người Nhật thì thường kỹ tính nền người nước ngo","tags":["life"],"title":"Thuê nhà ở Nhật","uri":"https://thanhchungbtc.github.io/2018/04/thue-nha-o-nhat/","year":"2018"},{"content":"最近、phpアプリケーションをリリースした時、とんでもないことに遭った。\n全画面が動かなくなった。\n問題 ソースコードを開発Linux環境からクラウド環境へリリースした後、なんだかブラウザにResponseコード200にも関わらず、「Gzipが不正よ」と文句され、画面表示ができない。\n確かにクラウド環境ではレスポンスのGzip圧縮を追加してるので、phpとgzip周辺に結構ハマった。\n原因 このシステムはかなり古いので、ob_start(\u0026quot;ob_gzhandler\u0026quot;);でgzipレスポンスを作っている。 gzipレスポンスを分析したところ、なんとPHPソースファイルにBOMがついていて、不正なGzipを送信しているのが原因だった！\\\n※BOMはEF BB BFで確認可能\nWindows上のエディターでは「UTF-8 BOM付で保存」という設定があって、この設定でファイル保存かもしれないよね。\n対策 全てUTF-8 BOM付のソースファイルを抽出し、BOMを消せば、正常に動いた。\nBOM付きファイル抽出 grep -rl $'\\xEF\\xBB\\xBF' .  BOMを排除する sed -i '1 s/^\\xef\\xbb\\xbf//' *.php  ","id":14,"section":"posts","summary":"最近、phpアプリケーションをリリースした時、とんでもないことに遭った。 全画面が動かなくなった。 問題 ソースコードを開発Linux環境からクラ","tags":["php","bom"],"title":"[PHP]UTF-8 BOMにやられた","uri":"https://thanhchungbtc.github.io/2018/02/php-suck-bom-utf8/","year":"2018"},{"content":"psqlや何かのSQLツールで、SQLを実行した時、このエラーが出ると、その後クエリが実行できなくなることがあったので、調べてみた。\n原因は簡単だが、大量クエリを実行したので、気づかず、結構ハマった！\n原因 Transaction内に一度エラーが発生すると、明示的にそのTransactionをabortしなければならないようだ。\nSQL Server等の他のRDBMSだと、エラーが出てきても、その場で直して、処理を続けるんだね。\n[例]\nbegin; selet * from foo;  このクエリを実行すると、「ERROR: syntax error at or near ‘selet’“」が出るはず。\nこれで正しくselect * from foo;に修正し、再度実行をすると、冒頭のエラーが出て実行できなかった。\n因みに、sqlserverはこの問題が発生しないようだ。\n対策 エラーが出たら、\nrollback;  を実行しなければならない。\nなぜPostgresはそうなったのか？ Postgresはユーザで終了したTransactionとシステムの都合(例外等）で終了したTransactionは区別しているようだ。 https://github.com/postgres/postgres/blob/master/src/backend/access/transam/READMEを参照すると、\n    システムの都合でTransactionが終了した場合：AbortCurrentTransaction アプリケーション状態はTBLOCK_ABORT    ユーザでTransactionを終了した場合：UserAbortTransactionBlock アプリケーション状態はTBLOCK_ABORT_END     ケース１でも自動にTransactionを終了させれば良いでしょうかって思うよね。 実はそれに応じるonerrorrollbackオプションがあるが、やっぱり長いTransaction内にエラーが発生したら、最初から実施しないといけない点は不便が感じるよね〜 onerrorrollbackについての詳細説明も是非ご参照ください。 https://www.endpoint.com/blog/2015/02/24/postgres-onerrorrollback-explained\n","id":15,"section":"posts","summary":"psqlや何かのSQLツールで、SQLを実行した時、このエラーが出ると、その後クエリが実行できなくなることがあったので、調べてみた。 原因は簡","tags":["postgres"],"title":"[Postgres] current transaction is aborted, commands ignored until end of transaction block","uri":"https://thanhchungbtc.github.io/2018/01/postgres-current-transaction-is-aborted/","year":"2018"},{"content":"最近セキュリティ考慮したシステム設計を経験したので、メモします。\n1. ユーザー認証  ログイン失敗する際詳しメッセージが出さない 指定回数でログイン失敗したらアカウントロックをかかる アカウントロックをかかった際管理者にメール等で通知 パースワードの有効期限を実装 パースワード変更するには現在のパースワードが必要 直接パースワードはDBに保存しない  2. 権限制御  直接URLをアクセス許可かどうか検討 各アクションは実行する前に権限をチェックする ボタンの表示、非表示等ではなくロジック実装である。 ブラウザの戻るボタンを要注意  3. セッション管理  Cookieセンシティブデーターを持たない SessionIdはユニックであり、サーバー側にてアサインするべき SessionIdは推測しにくい SessionIdはできればライフタイムが短く設定するべき ログアウトする際SessionIdは廃棄するべき CookieはHttpOnly,Secure属性設定するべき パーマネントCookieよりセッションCookieを使用したほうが良い  4. バリデーション  クライアントからのデータは信頼性がゼロとして必ずサーバーサイドバリデーション実装 HTML特殊文字、危険な文字等エスケープするべき  5. クロスサイトスクリプティング  動的な内容を表示する箇所はすべてHTMLエスケープするか確認 Query stringのデータは直接表示させない  6. コマンドインジェクション  シェルコマンドが直接呼び出す際パラメータエスケープをするべきだ  7. SQLインジェクション  SQLを組み立てる際ストリング結合ではなくすべてprepare statementを使用するべき  8. バッファオーバーフロー  すべてのリクエストデータは最大値をバリデーションする  9. 暗号化,秘密情報  認証されたアルゴリズムを使用すること 秘密鍵、DB情報等を持っている.envファイルは保護すること  10. エラーハンドリング  エラーになった際エラー情報をユーザーに見せないこと  11. ロギング  ログには日付、タイプ、詳細情報が出される  12. サーバー設定  Debugモードオフする すべてリクエストはHTTPSを介すること Apacheサーバーの場合はApacheチェックリスト参照する  ","id":16,"section":"posts","summary":"最近セキュリティ考慮したシステム設計を経験したので、メモします。 1. ユーザー認証 ログイン失敗する際詳しメッセージが出さない 指定回数でログイン失","tags":["security"],"title":"[Security]Web Application Security Checklist","uri":"https://thanhchungbtc.github.io/2017/12/web-application-security-checklist/","year":"2017"},{"content":"Apacheサーバー上HTTPSを構築してみた。\n流れ    CSRを作成する    証明書発行    サーバー設定    1. CSRを作成する CSR (Certificate Signing Request)は証明書発行依頼書と呼ばれ、CA(Certificate authority)へ提出するもの。 作成時に以下の情報が重要となるので、メモしておいた。\n Common Name (eg, your name or your server's hostname) Domain name or server's public IP address  1.1. Private Key(機密鍵)発行 openssl genrsa -out /path/to/.key 2048\n1.2. CSR発行 (Certificate Signing Request) openssl req -new -key /path/to/.key -out /path/to/.csr\n1.3. Private Keyからpassphraseを排除 Passphraseを有効にしていると、サーバー再起動した際、Private Keyを認証する為、Passphraseが求められるので、入力完了するまで、\u0008Websiteをアクセスできないことがある。\ncp server.key server.key.org openssl rsa -in server.key.org -out server.key  2. 証明書取得 実際はCAに発行してもらうが、テスト時は自己署名証明書を使用する。 このテストのようの証明書はself-signed certificateと呼ばれる。\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt  👉self-signed certificateを使用する場合、以下のコマンドでCSR発行せずに、直接証明書を生成することができる\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt   req: X509によりCSR作成 x509: self-signed認証発行する指示 nodes: passphraseを使用しない days 365: 有効期限（１年） newkey rsa:2048長ビットのkeyと証明書同時に発行。(rsa key with 2048 bits long) keyout: private keyの作成場所 out: 証明書の置く場所  3. サーバー設定 3.1. 設定ファイル修正 /etc/httpd/conf.d/ssl.conf\n# プロトコル SSLProtocol -All +TLSv1 +TLSv1.1 +TLSv1.2 # 証明書指 SSLCertificateFile path/to/.crt # 鍵ファイル指定 SSLCertificateKeyFile /path/to/.key  3.2. firewall 設定 httpsアクセスを許可する\nfirewall-cmd --add-service=https --permanent firewall-cmd --reload  ","id":17,"section":"posts","summary":"Apacheサーバー上HTTPSを構築してみた。 流れ CSRを作成する 証明書発行 サーバー設定 1. CSRを作成する CSR (Certificate Signing Request)は証明書発","tags":["linux","apache","https"],"title":"Centos7/Apache上HTTPSサーバーを作ってみる","uri":"https://thanhchungbtc.github.io/2017/11/centos-apache-https-server/","year":"2017"},{"content":"Source: Source: StackOverFlow\n日本語  ブラウザはhttps://payment.comに接続を成立する。 https://payment.comのサーバーはブラウザに証明書を送る。この証明書は公開鍵が含まれる。 ブラウザはhttps://payment.comの証明書は有効であるものを確認する。※ ステップ３を通過したら、ブラウザは新しい鍵（Kと呼ばれる）を生成し、https://payment.comの公開鍵を使って暗号化してからhttps://payment.comに送信する https://payment.comは機密鍵でKを複合化する ここからブラウザとサーバはKでデータ通信を行う。  Tiếng Việt.  Browser sẽ truy cập 1 trang web https. Ở đây là https://payment.com Server hay Load Balancer (LB) của payment.com sẽ trả về certificate để chứng thực rằng website user đang truy cập là website chính thức. Trong certificate là một public key PK, dùng để mã hóa K ở bước 4. Browser sẽ kiểm chứng certificate (bằng cách chạy thuật toán kiểm tra chữ ký). Quá trình này giúp browser xác định https://payment.com là thật hay giả. Sau khi kiểm chứng được certificate, browser sẽ tự sinh ra 1 khóa K. Khóa K sẽ được dùng để mã hóa tất cả các liên lạc giữa browser và payment.com sau này. Do quá trình mã hóa các gói tin dùng mã đối xứng, khóa K cần được gửi trở lại payment.com vì nếu không có K, server (LB) không thể nào giải mã được gói tin. Khóa K được gửi trả lại cho payment.com. Phía payment.com sẽ dùng private key (được bảo vệ) để giải mã gói tin này và qua đó có được thông tin về K. payment.com và browser dùng khóa K để mã hóa toàn bộ dữ liệu liên lạc sau này.  Certificate là một khối dữ liệu bao gồm rất nhiều thông tin về payment.com. Các thông tin này bao gồm:\n Tên domain Tên công ty sở hữu Thời gian certificate được cấp Thời hạn certificate Public key PK  Làm thế nào browser kiểm chứng được certificate ở bước 3 Bất cứ người nào đứng giữa browser và payment.com đều có thể làm giả certificate và public key. Bằng cách làm giả certificate, người đứng giữa có thể giả dạng payment.com. Bằng cách giả public key, người đứng giữa có thể dùng khóa private của mình để xem thông tin truyển tải giữa 2 bên. Vậy làm thế nào để ngăn chặn cách tấn công này. Cách giải quyết là: CA (Certificate Authority).\nCA là gì? Làm gì? Trong thực tế, để chứng minh một ai đó trình độ đại học, trường đại học nơi người đó học sẽ cấp cho họ một tấm bằng. Do tấm bằng đó có thể bị làm giả, ta cần một đơn vị chứng minh đó là bằng thật. CA chính là người chứng minh certificate mà payment.com cung cấp là thật! CA bán dịch vụ chứng thực đó bằng cách ký chứng minh rằng certificate của payment.com là thật\nCertificate chứng thực cho payment.com sẽ được CA ký bằng khóa bí mật của CA. Khóa này chỉ có CA biết và do vậy việc chữ ký là an toàn. payment.com sẽ gửi cho user certificate đã được ký bởi CA cùng với khóa công khai PK2 của khóa bí mật CA dùng để ký certificate. Browser sẽ tiến hành kiểm tra certificate này như bình thường dùng khóa công khai PK2 của CA.\nĐến đây vấn đề chưa thực sự được giải quyết vì, khóa công khai của CA cũng hoàn toàn có thể bị làm giả và do vậy certificate hoàn toàn có thể là giả! Giống như thực tế người chứng minh cho tấm bằng đại học cũng có thể bị làm giả. Để chắc chắn việc này, ta có thể ký chứng thực certificate do CA ký là thật. Cách làm có thể hoàn toàn tương tự là dùng khóa bí mật nào đó và ký tiếp và đính kèm khóa công khai PK3 với certificate sau khi được ký. Cứ thế ta có một dãy các certificate và khóa công khai mà certificate sau chứng thực cho certificate trước. Do bản chất đệ quy, ta cần điểm dừng là một certificate mà ta hoàn toàn tin tưởng. Đến đây ta có khái niệm root certificate.\nRoot certificate Root certificate là certificate mà ta hoàn toàn tin tưởng. Khi có certificate này, ta có thể tin tưởng những certificate mà được chứng thực bởi certificate này là hoàn toàn hợp lệ (giống trong thực tế là cơ quan công chứng!). Mỗi OS và browser có một danh sách các certificate mà OS và browser đó tin tưởng.\nFirefox tin tưởng các certificate có danh sách tại: https://wiki.mozilla.org/CA:IncludedCAs RHEL có danh sách các certificate tin tưởng tại: /etc/pki/tls/certs/\nDo root certificate là certificate cuối cùng dùng để chứng thực các certificate trong chuỗi, khóa bí mật của certificate này cần được bảo vệ nghiêm ngặt. Bất cứ công ty cung cấp dịch vụ CA nào bị tấn công và bị mất khóa bí mật của root certificate đều rất nguy hiểm, bởi vì hackers có thể dùng khóa đó để ký certificate ở bước cuối cùng. Do browser và OS tin tưởng certificate này nên tất cả certificate, không nhất thiết do CA bị hack cung cấp, đều có thể bị làm giả. Các CA do vậy dùng rất nhiều công sức để bảo vệ thật kín đáo khóa bí mật này. Kinh doanh chứng thực CA là kinh doanh về mặt lòng tin, CA hứa sẽ đảm bảo tốt nhất khóa bí mật của họ và ta trả tiền để họ dùng khóa bí mật của họ ký.\nTheo đồn đại của giang hồ, verisign dùng cửa lock dày và các tay súng chuyên nghiệp cùng hệ thống truy cập phức tạp để bảo vệ khóa bí mật này.\nXem certificate chain trong thực tế Đến đây ta chắc đã hiểu phần nào về cơ chế chứng thực cũng như cách hoạt động của HTTPS. Ta sẽ cùng xem chuỗi certificate trong thực tế.\nFacebook certificate được ký bởi DigiCert High Assurance CA-3. Bản thân CA-3 được chứng thực bởi EV RootCA.\nCác vấn đề liên quan đến https / certificate Nguyên tắc hoạt động là như vậy, trong thực tế để duy trì và vận hành một hệ thống https cần tốn khá nhiều công sức. Dưới đây là một số case-studies mình gặp trong quá trình vận hành một website. Qua một số case-studies này hy vọng bạn sẽ hiểu tầm quan trọng của mỗi sự kiện và ý nghĩa của nó.\nHeartbleed Sự kiện heartbleed là sự kiện đình đám của năm 2014. Heartbleed là lỗi bảo mật nằm trong bộ thư viện OpenSSL, bộ thư viện chủ đạo xử lý mã hóa trên Linux. Các webserver đều được build sử dụng OpenSSL nếu muốn phục vụ https.\nHeartbleed xảy ra khi openssl không kiểm tra độ dài trả về của một chuỗi ký tự và vô tình trả về thông tin nằm sau chuỗi ký tự này trên bộ nhớ. Vô tình phần bộ nhớ này bao gồm khóa bí mật được dùng để ký certificate ban đầu. Bằng cách hỏi máy chủ cho xem chìa khóa bí mật này, hacker có thể dùng nó để giải mã khóa mã hóa liên lạc ở bước 5 và do đó đọc được toàn bộ nội dung của phiên liên lạc.\nHeartbleed nguy hiểm bởi việc tấn công này hoàn toàn không để lại dấu vết.\nCác công ty cung cấp dịch vụ qua https đã phải xử lý vấn đề này bao gồm các bước sau:\n Nâng cấp phiên bản openssl Khởi động lại máy chủ web (apache, nginx) Tạo một khóa bí mật mới, certificate mới và yêu cầu CAs ký lại  Diginostar Diginostar là hãng CAs của Hà Lan bị hacker tấn công và lấy được khóa bí mật. Từ đó tất cả các root certificate của Diginostar đều bị xóa bỏ khỏi browser, do lo sợ hacker sẽ dùng khóa bí mật này làm giả certificate. Điều này dẫn đến sự phá sản của CA.\nQua đấy mới thấy việc bảo vệ khóa bí mật an toàn là vấn đề sống còn của các CAs.\nSuperfish Hãng máy tính Lenovo khi bán máy tính đã cài thêm một phần mềm hiển thị quảng cáo đến người dùng. Khi người dùng lướt net, phần mềm này sẽ tự thêm một quảng cáo nhỏ trên browser. Để có thể thêm quảng cáo vào bất cứ chỗ nào, phần mềm này tự ý cài một root certificate vào máy lenovo bán đi. Root certificate này lại là một certificate tự ký, bất cứ ai có máy lenovo đều có thể có được khóa bí mật ký certificate này. Điều này vô tình biến tất cả người dùng máy lenovo thành đối tượng bị làm giả certificate. Tất cả các liên lạc https đều có thể bị làm giả, do vậy việc làm này đã tạo ra một lỗi bảo mật rất nghiêm trọng.\nHãng Lenovo sau đó đã phải xin lỗi người dùng và đưa ra phần mềm gỡ bỏ tool này.\nhttp://support.lenovo.com/vn/vi/product_security/superfish_uninstall\nOS quá cũ Các root certificate đi kèm với máy chủ không phải có thời hạn mãi mãi mà được làm mới qua mỗi lần release một phiên bản của OS. Do vậy việc update OS thường xuyên là điều nên làm. Tuy vậy đối với các máy chủ làm việc bận rộn, việc nâng cấp nhiều khi là điều khó khăn. Từ đây nảy sinh một vấn đề như sau.\nMáy chủ thỉnh thoảng hay phải gọi các https thông qua curl, ví dụ gọi twitter api qua https, hay gọi một dịch thanh toán nào đó qua Https. Giống như browser, curl dùng root certificate đi kèm để chứng thực các certificate phía dịch vụ gửi về. Tuy vậy khi root certificate hết hạn, việc chứng thực này sẽ thất bại, kéo theo việc app của bạn sẽ không chạy đúng nữa. Những lúc này việc update root certificate là việc cần phải làm.\nKết luận Bài viết trình bày khái quát nguyên tắc hoạt động của https cũng như các vấn đề xoay quanh liên lạc dùng https. Hy vọng qua bài viết bạn hiểu rõ hơn về https cũng như lý giải được tầm nghiêm trọng của những vấn đề và sự kiện xoay quanh https.\nBài này chủ yếu tham khảo và dịch lại 1 chút từ Nguồn Kipalog\n","id":18,"section":"posts","summary":"Source: Source: StackOverFlow 日本語 ブラウザはhttps://payment.comに接続を成立する。 https://payment.comのサーバーはブラウザに証","tags":["https"],"title":"Https Basic Memo","uri":"https://thanhchungbtc.github.io/2017/10/https-basic-memo/","year":"2017"},{"content":"X-XSS-Protection 概要 X-XSS-Protection: 0; X-XSS-Protection: 1; X-XSS-Protection: 1; mode=block  設定方法 X-XSS-Protection: 1; mode=block   理由はこちらご覧ください     platform どう設定するの     Rails4,5 設定不要。(デフォルト有効）   Django SECURE_BROWSER_XSS_FILTER = True   Express.js Helmet   Go unrolled/secure   Nginx add_header: X-XSS-Protection “1; mode=block”;   Apache Header always set X-XSS-Protection “1; mode=block”    Content Security Policy (CSP) 概要 Content-Security-Policy: \u0026lt;policy\u0026gt;  設定方法    platform どう設定するの     Rails4,5 secureheaders   Django django-csp   Express.js helmet/csp   Go unrolled/secure   Nginx add_header Content-Security-Policy “”;   Apache Header always set Content-Security-Policy “”    参照：\n https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy https://csp.withgoogle.com/docs/adopting-csp.html  HTTP Strict Transport Security (HSTS) 概要 Strict-Transport-Security: max-age=\u0026lt;expire-time\u0026gt; Strict-Transport-Security: max-age=\u0026lt;expire-time\u0026gt;; includeSubDomains Strict-Transport-Security: max-age=\u0026lt;expire-time\u0026gt;; preload  設定方法    platform どう設定するの     Rails 4 config.force_ssl = true; config.ssl_options = { hsts: { subdomains: true } }   Rails 5 config.force_ssl = true   Django SECURE_HSTS_SECONDS = 31536000; SECURE_HSTS_INCLUDE_SUBDOMAINS = True   Express.js helmet   Go unrolled/secure   Nginx add_header Strict-Transport-Security “max-age=31536000; includeSubdomains; “;   Apache Header always set Strict-Transport-Security “max-age=31536000; includeSubdomains;    HTTP Public Key Pinning (HPKP) 概要 Public-Key-Pins: pin-sha256=\u0026lt;base64==\u0026gt;; max-age=\u0026lt;expireTime\u0026gt;; Public-Key-Pins: pin-sha256=\u0026lt;base64==\u0026gt;; max-age=\u0026lt;expireTime\u0026gt;; includeSubDomains Public-Key-Pins: pin-sha256=\u0026lt;base64==\u0026gt;; max-age=\u0026lt;expireTime\u0026gt;; report-uri=\u0026lt;reportURI\u0026gt;  設定方法 設定を推奨しない 参照：https://blog.qualys.com/ssllabs/2016/09/06/is-http-public-key-pinning-dead\nX-Frame-Options 概要 X-Frame-Options: DENY X-Frame-Options: SAMEORIGIN X-Frame-Options: ALLOW-FROM https://example.com/  設定方法    platform どう設定するの     Rails4,5 config.action_dispatch.default_headers[‘X-Frame-Options’] = “DENY”   Django X_FRAME_OPTIONS = ‘DENY’   Express.js helmet   Go unrolled/secure   Nginx add_header X-Frame-Options “deny”;   Apache Header always set X-Frame-Options “deny”    X-Content-Type-Options 概要 X-Content-Type-Options: nosniff;  MIME sniffingを防ぐヘッダ\n設定方法    platform どう設定するの     Rails4,5 デフォルト有効   Django SECURE_CONTENT_TYPE_NOSNIFF = True   Express.js helmet   Go unrolled/secure   Nginx add_header X-Content-Type-Options nosniff;   Apache Header always set X-Content-Type-Options nosniff    Referrer-Policy 概要 Referrer-Policy: \u0026quot;no-referrer\u0026quot; Referrer-Policy: \u0026quot;no-referrer-when-downgrade\u0026quot; Referrer-Policy: \u0026quot;origin\u0026quot; Referrer-Policy: \u0026quot;origin-when-cross-origin\u0026quot; Referrer-Policy: \u0026quot;same-origin\u0026quot; Referrer-Policy: \u0026quot;strict-origin\u0026quot; Referrer-Policy: \u0026quot;strict-origin-when-cross-origin\u0026quot; Referrer-Policy: \u0026quot;unsafe-url\u0026quot;  設定方法    platform どう設定するの     Rails4,5 secureheaders   Django Custom middleware   Express.js helmet   Go Custom middleware   Nginx add_header Referrer-Policy “no-referrer”;   Apache Header always set Referrer-Policy “no-referrer”    参照：https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\n参照：https://techtalk.vn/tat-ca-nhung-thu-ban-can-biet-ve-http-security-headers.html\n","id":19,"section":"posts","summary":"X-XSS-Protection 概要 X-XSS-Protection: 0; X-XSS-Protection: 1; X-XSS-Protection: 1; mode=block 設定方法 X-XSS-Protection: 1; mode=block 理由はこちらご覧ください platform どう設定するの Rails4,5 設定不要。(デフォルト有効） Django SECURE_BROWSER_XSS_FILTER = True Express.js Helmet Go unrolled/secure Nginx add_header: X-XSS-Protection “1; mode","tags":["security","apache"],"title":"[Security]HTTP Security Headers","uri":"https://thanhchungbtc.github.io/2017/10/apache-security-header/","year":"2017"},{"content":"問題 psqlでSQLを指定して実行できるが、例えば複数SQLを同時に実行させ、また前のSQLの結果によって、続行するかしないかという条件付きの複雑SQLを実行することができない。\n今回以下のようにShell scriptを作りたい。\nConnectDb() { PGPASSWORD=postgres psql -U postgres database -t -A -F , -v ON_ERROR_STOP=1 -v AUTOCOMMIT=0 } printMsg() { echo \u0026quot;$PROGRAM/$SUBMODULE $(date \u0026quot;+ %Y%H%s\u0026quot;)\u0026quot; $1 | tee -a ~/Desktop/shell/log/test.log } ConnectDb \u0026lt;\u0026lt;EOF start transaction; select * from ...; # other database stubs # addtional operations like logging come here printMsg \u0026quot;Querying ...\u0026quot; # mix of conditional shell and psql command if [ some accepted condition ] commit; if [ some bad conditions ] rollback; if [ should do more database query ] do some CRUD actions commit; EOF  解決方法 shellとSQLが混在する為、単純のpsqlに制御コマンドを入れることができない。\n ちなみに、db2はこのようなshellscriptを簡単に作れる。\n ここで、coprocを使えば、実現可能なことがわかった。\ncoprocの詳細はstackoverflowですごいわかりやすい回答があるので、ご参考ください。\npsqlをバックグラウンドで動かせる psqlにSQLを取り入れる SQLの実行結果を確認する ","id":20,"section":"posts","summary":"問題 psqlでSQLを指定して実行できるが、例えば複数SQLを同時に実行させ、また前のSQLの結果によって、続行するかしないかという条件付き","tags":["shell","postgres","coprocess","linux"],"title":"[Shell]Shellで複雑なトランザクション制御方法","uri":"https://thanhchungbtc.github.io/2017/08/shell-postgres-transaction-control/","year":"2017"},{"content":"Useful Postgres command 1. Move DB to another server pg_dump -C -h sourceip -U username password | psql -h destinationip -U username  2. Init, start, restart initdb -D /path/to/data/folder pg_ctl -D /path/to/data/folder start pg_ctl -D /path/to/data/folder restart  3. Config file  pg_hba.config: use to config authentication method postgres.conf: use to config listenning host, etc.  4. Config authentication  For server  vim /path/to/pg_hba.conf # add the following line: host all all 10.0.0.70/32 md5 # change IP address   For client\nCreate ~/.pgpass and add the following line  host:port:dbname:usr:pwd  change permission\nchmod 0600 ~/.pgpass  ","id":21,"section":"posts","summary":"Useful Postgres command 1. Move DB to another server pg_dump -C -h sourceip -U username password | psql -h destinationip -U username  2. Init, start, restart initdb -D /path/to/data/folder pg_ctl -D /path/to/data/folder start pg_ctl -D /path/to/data/folder restart  3. Config file  pg_hba.config: use to config authentication method postgres.conf: use to config listenning host, etc.  4. Config authentication  For server  vim /path/to/pg_hba.conf # add the following line: host all all 10.","tags":["postgres"],"title":"Postgres Memo","uri":"https://thanhchungbtc.github.io/2017/07/postgres-memo/","year":"2017"},{"content":"while developing in languages that are case-insensitive like php, be careful if development OS and production OS are acting differently at case-sensitivity, otherwise, some weird things will happen.\nFor example, the code below works well in Windows\n// filename: app/Models/Userorder.php namespace App\\Models; class UserOrder { }  usage\nnew \\App\\Models\\UserOrder();   Did you notice the difference between file name and class name?\n Because php use autoload to correctly load the file and class at runtime, in the declaration\nnew \\App\\Models\\UserOrder();  first it will try loading the file app/Models/UserOrder.php and instance UserOrder object.\nAs Windows is case-insensitive, UserOrder.php == Userorder.php, no problem here, but in Linux, you will get\n Fatal error: Class UrderOrder not found\n In that case, change the file name that matches the class name\napp/Models/Userorder.php -\u0026gt; app/Models/UserOrder.php  ","id":22,"section":"posts","summary":"while developing in languages that are case-insensitive like php, be careful if development OS and production OS are acting differently at case-sensitivity, otherwise, some weird things will happen.\nFor example, the code below works well in Windows\n// filename: app/Models/Userorder.php namespace App\\Models; class UserOrder { }  usage\nnew \\App\\Models\\UserOrder();   Did you notice the difference between file name and class name?\n Because php use autoload to correctly load the file and class at runtime, in the declaration","tags":["php"],"title":"[PHP]Windows Case Insensitive Problem","uri":"https://thanhchungbtc.github.io/2017/05/windows-case-insensitive-problem/","year":"2017"}],"tags":[{"title":"apache","uri":"https://thanhchungbtc.github.io/tags/apache/"},{"title":"bom","uri":"https://thanhchungbtc.github.io/tags/bom/"},{"title":"coprocess","uri":"https://thanhchungbtc.github.io/tags/coprocess/"},{"title":"crossplatform","uri":"https://thanhchungbtc.github.io/tags/crossplatform/"},{"title":"docker","uri":"https://thanhchungbtc.github.io/tags/docker/"},{"title":"flutter","uri":"https://thanhchungbtc.github.io/tags/flutter/"},{"title":"https","uri":"https://thanhchungbtc.github.io/tags/https/"},{"title":"iOS","uri":"https://thanhchungbtc.github.io/tags/ios/"},{"title":"life","uri":"https://thanhchungbtc.github.io/tags/life/"},{"title":"linux","uri":"https://thanhchungbtc.github.io/tags/linux/"},{"title":"mac","uri":"https://thanhchungbtc.github.io/tags/mac/"},{"title":"php","uri":"https://thanhchungbtc.github.io/tags/php/"},{"title":"postgres","uri":"https://thanhchungbtc.github.io/tags/postgres/"},{"title":"security","uri":"https://thanhchungbtc.github.io/tags/security/"},{"title":"shell","uri":"https://thanhchungbtc.github.io/tags/shell/"},{"title":"tip","uri":"https://thanhchungbtc.github.io/tags/tip/"}]}